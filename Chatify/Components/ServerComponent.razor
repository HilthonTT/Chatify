@inject IConfiguration config
@inject NavigationManager navManager
@inject IServerData serverData
@inject IMessageData messageData
@inject IRoleData roleData
@inject IJSRuntime JSRuntime

<div class="modal fade" id="modal-@Server.Id" tabindex="-1" role="dialog" aria-labelledby="modalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="modalLongTitle">
                Leave @Server.ServerName?
            </h5>
            <button type="button" class="btn-close btn-close-white text-white" data-dismiss="modal" aria-label="Close" />
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="mb-3">
                        <div class="mt-1 text-center h5">Are you sure you would like to leave @Server.ServerName?</div>
                    </div>
                    <div class="center-children">
                        <button class="btn btn-secondary btn-lg text-uppercase mt-4"
                            @onclick="(async() => await LeaveServer(Server))">
                            Leave
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" 
                    class="btn btn-secondary" 
                    data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<div class="col-xl-6 col-lg-12 mb-3 center-children">
    <div class="row">
        <div class="col-12">
            <div class="card bg-dark text-light border-white p-2 h-100 d-flex flex-column" style="width: 30rem;">
                @if (string.IsNullOrWhiteSpace(Server.PictureName) is false)
                {
                    <div class="text-center p-3">
                        <img src="@CreateWebPath(Server.PictureName)" 
                            class="card-img-top rounded-circle" 
                            alt="@Server.OriginalPictureName"
                            style="width: 300px; height: 300px;">
                    </div>
                }
                else
                {
                    <div class="text-center p-3">
                        <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                            class="card-img-top rounded-circle" 
                            alt="Placeholder Image"
                            style="width: 300px; height: 300px;">
                    </div>
                }
                <div class="mt-auto">
                    <div class="card-body text-break">
                        <h5 class="card-title">@Server.ServerName</h5>
                        <p class="card-text">@Server.Category.CategoryName</p>
                        <p class="card-text mb-0">
                            <small class="text-muted">
                                Owner: @Server.Owner.DisplayName
                            </small>
                        </p>
                        <p class="card-text mb-0">
                            <small class="text-warning">
                                @GetNonReadMessagesCount()
                            </small>
                        </p>
                        <p class="card-text">
                            <small class="text-danger">
                                @Server.Members.Count Participants
                            </small>
                        </p>
                        @if (IsUserBanned(Server) is false)
                        {
                            @if (IsUserInServer(Server) is false)
                            {
                                <button class="btn btn-outline-secondary w-100" @onclick="(async() => await JoinServer(Server))">
                                    Join Server
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-secondary w-100 mb-2" @onclick="(() => OpenDetails(Server))">
                                    Check out
                                </button>
                                @if (Server.Owner.Id != LoggedInUser.Id)
                                {
                                    <button class="btn btn-outline-danger w-100" 
                                        data-toggle="modal" 
                                        data-target="#modal-@Server.Id"
                                        @onclick="(() => selectedServer = Server)">
                                        Leave Server
                                    </button>
                                }
                            }
                        }
                        else
                        {
                            <button class="btn btn-outline-danger w-100" disabled>You are currently Banned</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public ServerModel Server { get; set; }

    [Parameter]
    [EditorRequired]
    public UserModel LoggedInUser { get; set; }

    private ServerModel selectedServer;

    private List<MessageModel> nonReadMessages;

    protected override async Task OnInitializedAsync()
    {
        nonReadMessages = await messageData.GetServerUnreadMessagesAsync(Server, LoggedInUser);  
    }

    private async Task CloseModal(ServerModel server)
    {
        await JSRuntime.InvokeVoidAsync("closeModal", $"modal-{server.Id}");
    }

    private async Task JoinServer(ServerModel server)
    {
        var user = new BasicUserModel(LoggedInUser);
        var role = await roleData.GetServerMemberRoleAsync(server);

        role.Users.Add(user);
        var serverRole = await roleData.GetServerMemberRoleAsync(server);
        serverRole.Users.Add(user);
        await roleData.UpdateRole(role);
        await roleData.UpdateRole(serverRole);

        server.Members.Add(user);
        await serverData.UpdateServer(server);
        OpenDetails(server);
    }

    private async Task LeaveServer(ServerModel server)
    {
        var userToRemove = server.Members.FirstOrDefault(m => m.Id == LoggedInUser?.Id);
        var userServerRole = await roleData.GetUserServerRoleAsync(LoggedInUser, Server);
        if (userServerRole is not null)
        {
            var userToRoleRemove = userServerRole.Users.Where(u => u.Id == LoggedInUser.Id).FirstOrDefault();
            userServerRole.Users.Remove(userToRoleRemove);
            await roleData.UpdateRole(userServerRole);
        }

        if (userToRemove is not null)
        {
            server.Members.Remove(userToRemove);
            await serverData.UpdateServer(server);
        }

        await CloseModal(server);
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void OpenDetails(ServerModel server)
    {
        navManager.NavigateTo($"/Server/{server.Id}");
    }

    private bool IsUserBanned(ServerModel server)
    {
        bool IsUserInBannedList = server.BannedUsers.Any(b => b.Id == LoggedInUser?.Id);

        if (IsUserInBannedList)
        {
            return true;
        }

        return false;
    }

    private bool IsUserInServer(ServerModel server)
    {
        if (server.Owner.Id == LoggedInUser?.Id || server.Members.Any(m => m.Id == LoggedInUser?.Id))
        {
            return true;
        }

        return false;
    }

    private string GetNonReadMessagesCount()
    {
        if (nonReadMessages?.Count == 0)
        {
            return "";
        }
        if (nonReadMessages?.Count == 1)
        {
            return "1 unread message";
        }
        if (nonReadMessages?.Count > 99)
        {
            return "99+ unread messages";
        }
        if (nonReadMessages?.Count < 99)
        {
            return $"{nonReadMessages.Count} unread messages";
        }

        return "";
    }
}