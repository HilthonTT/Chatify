@inject IConfiguration config
@inject IMessageData messageData
@inject NavigationManager navManager

<div class="col-xl-6 col-lg-12 mb-3 center-children">
    <div class="row">
        <div class="col-12">
            <div class="card bg-dark text-light border-white p-2 h-100 d-flex flex-column" style="width: 30rem;">
                @if (string.IsNullOrWhiteSpace(Conversation.PictureName) is false)
                {
                    <div class="text-center p-3">
                        <img src="@CreateWebPath(Conversation.PictureName)" 
                            class="card-img-top rounded-circle" 
                            alt="@Conversation.OriginalPictureName"
                            style="width: 300px; height: 300px;">
                    </div>
                }
                else
                {
                    <div class="text-center p-3">
                        <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                            class="card-img-top rounded-circle" 
                            alt="Placeholder Image"
                            style="width: 300px; height: 300px;">
                    </div>
                }
                <div class="mt-auto">
                    <div class="card-body text-break">
                        <h5 class="card-title">@Conversation.GroupName</h5>
                        <p class="card-text">@Conversation.Category.CategoryName</p>
                        <p class="card-text mb-0">
                            <small class="text-muted">
                                Owner: @Conversation.Owner.DisplayName
                            </small>
                        </p>
                        <p class="card-text mb-0">
                            <small class="text-warning">
                                @GetNonReadMessagesCount()
                            </small>
                        </p>
                        <p class="card-text">
                            <small class="text-danger">
                                @Conversation.Participants.Count Participants
                            </small>
                        </p>
                        @if (CanUserCheckOut())
                        {
                            <button class="btn btn-outline-secondary w-100" 
                                @onclick="(() => OpenDetails(Conversation))">
                                Check Out
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public ConversationModel Conversation { get; set; }

    [Parameter]
    [EditorRequired]
    public UserModel LoggedInUser { get; set; }

    private List<MessageModel> nonReadMessages;

    protected override async Task OnInitializedAsync()
    {
        nonReadMessages = await messageData.GetConversationUnreadMessagesAsync(Conversation, LoggedInUser);
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void OpenDetails(ConversationModel conversation)
    {
        navManager.NavigateTo($"/Conversation/{conversation.Id}");
    }

    private bool CanUserCheckOut()
    {
        if (Conversation.Participants.Select(p => p.Id == LoggedInUser.Id) is not null || 
            Conversation.Owner.Id == LoggedInUser.Id)
        {
            return true;
        }

        return false;
    }

    private string GetNonReadMessagesCount()
    {
        if (nonReadMessages?.Count == 0)
        {
            return "";
        }
        if (nonReadMessages?.Count == 1)
        {
            return "1 unread message";
        }
        if (nonReadMessages?.Count > 99)
        {
            return "99+ unread messages";
        }
        if (nonReadMessages?.Count < 99)
        {
            return $"{nonReadMessages.Count} unread messages";
        }

        return "";
    }
}
