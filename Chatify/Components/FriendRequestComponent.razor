@inject IFriendRequestData requestData
@inject IUserData userData
@inject IJSRuntime JSRuntime

<ModalComponent Id=@($"requestModal-{FriendRequest.Id}") Title=@($"Friend {FriendRequest.Sender.DisplayName}")>
    <ChildContent>
        <div class="row">
            <div class="mt-1">Are you sure you want to add @FriendRequest.Sender?.DisplayName?</div>
            <div class="center-children">
                <button class="btn btn-secondary w-100 btn-lg text-uppercase mt-4" @onclick="AcceptRequest">
                    Accept Friend Request
                </button>
            </div>
        </div>
    </ChildContent>
</ModalComponent>

<div class="card mt-2">
    <div class="card-body bg-dark">
        <h5 class="card-title">Request sent by: @FriendRequest.Sender.DisplayName</h5>
        <p class="card-text">Sent at @FriendRequest.RequestDate UTC</p>
        <p class="card-text">Status: @GetStatusText()</p>
        <button class="btn btn-secondary w-100" 
            data-toggle="modal"
            data-target="#requestModal-@FriendRequest.Id">Accept</button>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public FriendRequestModel FriendRequest { get; set; }

    [Parameter]
    [EditorRequired]
    public List<FriendRequestModel> PendingRequests { get; set; }

    [Parameter]
    [EditorRequired]
    public UserModel LoggedInUser { get; set; }

    [Parameter]
    public EventCallback<FriendRequestModel> RequestChanged { get; set; }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", $"requestModal-{FriendRequest.Id}");
    }

    private async Task AcceptRequest()
    {
        if (FriendRequest.IsAccepted) return;

        var sender = await userData.GetUserAsync(FriendRequest.Sender.Id);

        FriendRequest.IsAccepted = true;
        LoggedInUser.Friends.Add(FriendRequest.Sender);
        sender.Friends.Add(new BasicUserModel(LoggedInUser));

        await requestData.UpdateFriendRequest(FriendRequest);
        await userData.UpdateUser(LoggedInUser);
        await userData.UpdateUser(sender);

        PendingRequests.Remove(FriendRequest);

        await RequestChanged.InvokeAsync(FriendRequest);
        await CloseModal();
    }

    private string GetStatusText()
    {
        if (FriendRequest.IsAccepted)
        {
            return "Accepted";
        }

        return "Not Considered";
    }
}
