@page "/ServerSettings/ChannelCategory/{Id}"
@attribute [Authorize]
@inject IUserData userData
@inject IServerData serverData
@inject IChannelCategoryData channelCategoryData
@inject IChannelData channelData
@inject IAuditLogData auditLogData
@inject IRoleData roleData
@inject IBanData banData
@inject OidGenerator oidGenerator
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@inject IConfiguration config

<div class="modal fade" id="roleModal" tabindex="-1" role="dialog" aria-labelledby="roleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="roleModalLongTitle">
                Select which roles are allowed to talk in your channel.
            </h5>
            <button type="button" class="btn-close btn-close-white text-white" data-dismiss="modal" aria-label="Close" />
            </div>
            <div class="modal-body">
                <input type="text" placeholder="Search"
                    aria-label="Search Box" class="form-control bg-dark text-light input-section mb-4"
                    @oninput="(async(txt) => await OnSearchInput((string)txt.Value))"/>
                @if (roles?.Count > 0)
                {
                    <Virtualize Items="roles" Context="r" OverscanCount="10">
                        <div class="card bg-dark @GetRoleClass(r) clickable mb-4" 
                            @onclick="(() => AddOrRemoveSelectedRole(r))">
                            <div class="row g-0">
                                <div class="col-md-12">
                                    <div class="d-flex justify-content-between">
                                        <div class="card-body">
                                            <h5 class="card-title">@r.RoleName</h5>
                                            <p class="card-text">
                                                @r.RoleDescription
                                            </p>
                                            <p class="card-text">
                                                Date Created: @r.DateCreated.ToString("dd/MM/yyyy")
                                            </p>
                                        </div>
                                    </div>                          
                                </div>
                            </div>
                        </div>
                </Virtualize>
                }
                else
                {
                    <div class="center-children">
                        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
            <button type="button" 
                class="btn btn-secondary" 
                data-dismiss="modal">
                Close
            </button>
            </div>
        </div>
    </div>
</div>

@if (ban is null)
{
    <h1 class="page-heading mb-4">@channelCategory?.CategoryName channel category of @server?.ServerName</h1>
    
    <div class="rounded rounded-3">
        <div class="card-body bg-dark">
            <div class="row justify-content-between">
                <div class="row">
                    <div class="close-button-section">
                        <button class="btn btn-close btn-close-white" @onclick="ClosePage"/>
                    </div>
                    <div class="col-12">
                        <div class="center-children">
                            @if (string.IsNullOrWhiteSpace(server?.PictureName) is false)
                            {
                                <img src="@CreateWebPath(server.PictureName)"
                                class="img-fluidborder rounded-circle" 
                                alt="@server.OriginalPictureName"
                                style="width: 300px; height: 300px;">
                            }
                            else
                            {
                                <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                class="img-fluid rounded-circle" 
                                alt="Placeholder Image"
                                style="width: 300px; height: 300px;">
                            }
                        </div>
                        <h2 class="fw-bold text-uppercase text-center text-break">@server?.ServerName</h2>
                        <p class="text-break text-center h4">@channelCategory?.CategoryName</p>
                        @if (showCreateChannel is false && HasAnyPermissions())
                        {
                            <button class="btn btn-secondary w-100" 
                                @onclick="(() => showCreateChannel = !showCreateChannel)">
                                Create Channel
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary w-100 mb-3" 
                                @onclick="(() => showCreateChannel = !showCreateChannel)">
                                Close
                            </button>
                            <EditForm Model="creatingChannel" OnValidSubmit="Create">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="mb-3">
                                        <label class="form-label fw-bold text-uppercase" for="channel-name">Channel Name</label>
                                        <div class="mt-1">Name your channel's name</div>
                                        <ValidationMessage For="(() => creatingChannel.ChannelName)"/>
                                        <InputText class="form-control bg-dark text-white input-section" id="channel-name" 
                                            @bind-Value="creatingChannel.ChannelName"/>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label fw-bold text-uppercase" for="channel-description">Channel Description</label>
                                        <div class="mt-1">Describe your channel's purpose. What kind of discussion is it related to?</div>
                                        <ValidationMessage For="(() => creatingChannel.ChannelDescription)"/>
                                        <InputTextArea class="form-control bg-dark text-white input-section" id="channel-description"
                                            @bind-Value="creatingChannel.ChannelDescription"/>
                                    </div> 
                                    <div class="mb-3">
                                        <label class="form-label fw-bold text-uppercase" for="channel-roles">Channel Roles</label>
                                        <div class="mt-1 mb-1">
                                            Select which roles are allowed to chat in the channel. <br />
                                            <span class="text-danger">Note: All roles are by default allowed.</span>
                                        </div>
                                        <button class="btn btn-secondary text-uppercase" 
                                            type="button" data-toggle="modal" data-target="#roleModal">
                                            Open Roles
                                        </button>
                                    </div>
                                    <div class="center-children">
                                        <button class="btn btn-secondary btn-lg text-uppercase mt-4" type="submit">
                                            Create Channel
                                        </button>
                                    </div>
                                </div>
                            </EditForm>
                        }
                        @if (channels?.Count > 0)
                        {
                            <hr />
                            <div>
                                <h2>@channelCategory?.CategoryName's channels</h2>
                                <Virtualize Items="channels" Context="c" OverscanCount="10">
                                    <div class="card bg-dark border-white unclickable mb-4">
                                        <div class="row g-0">
                                            <div class="col-md-12">
                                                <div class="d-flex justify-content-between">
                                                    <div class="card-body">
                                                        <h5 class="card-title">@c.ChannelName</h5>
                                                        <p class="card-text">
                                                            @c.ChannelDescription
                                                        </p>
                                                        <p class="card-text">
                                                            Date Created: @c.DateCreated.ToString("dd/MM/yyyy")
                                                        </p>
                                                    </div>
                                                </div>                          
                                            </div>
                                        </div>
                                    </div>
                                </Virtualize>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <Banned />
}


@code {
    [Parameter]
    public string Id { get; set; }

    private CreateChannelModel creatingChannel = new();

    private UserModel loggedInUser;
    private ChannelCategoryModel channelCategory;
    private ServerModel server;
    private List<ChannelModel> channels;
    private BanModel ban;
    private RoleModel role;
    private List<RoleModel> roles;
    private List<RoleModel> allowedChannelRoles = new();
    private List<RoleModel> disallowedChannelRoles = new();
    private string searchText = "";
    private bool showCreateChannel = false;

    protected override async Task OnInitializedAsync()
    {
        channelCategory = await channelCategoryData.GetCategoryAsync(Id);
        server = await serverData.GetServerAsync(channelCategory.Server.Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (channelCategory is not null)
        {
            channels = await channelData.GetAllChannelsCategoryAsync(channelCategory);
        }
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);   
        }
        if (server is not null && loggedInUser is not null)
        {
            role = await roleData.GetUserServerRoleAsync(loggedInUser, server);
            roles = await roleData.GetAllRolesServerAsync(server);
            allowedChannelRoles = new List<RoleModel>(roles);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            if (server is not null)
            {
                await FilterRoles();
            }
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task FilterRoles()
    {
        var output = await roleData.GetAllRolesServerAsync(server);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(
                r => r.RoleName.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase) ||
                r.RoleDescription.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        roles = output;
        await SaveFilterState();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterRoles();
    }

    private void ClosePage()
    {
        navManager.NavigateTo($"/ServerSettings/{server.Id}");
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private async Task Create()
    {
        string objectId = await oidGenerator.GenerateOidAsync();
        ChannelModel c = new()
        {
            ObjectIdentifier = objectId,
            Category = channelCategory,
            ChannelName = creatingChannel.ChannelName,
            ChannelDescription = creatingChannel.ChannelDescription,
            Server = server,
            AllowedRoles = allowedChannelRoles,
            DisallowedRoles = disallowedChannelRoles,
        };
        await channelData.CreateChannel(c);
        var newChannel = await channelData.GetChannelObjectIdAsync(objectId);

        channelCategory.Channels.Add(newChannel);
        await serverData.UpdateServer(server);
        await channelCategoryData.UpdateCategory(channelCategory);

        creatingChannel = new();
        AuditLogModel a = new()
        {
            Name = "Channel Creation",
            Description = $"{loggedInUser.DisplayName} has created channel of Id {newChannel.Id}",
            User = new BasicUserModel(loggedInUser),
            Server = server,
            DateModified = DateTime.UtcNow,
        };

        await auditLogData.CreateAuditLog(a);
        allowedChannelRoles.Clear();
        disallowedChannelRoles.Clear();
    }

    private void AddOrRemoveSelectedRole(RoleModel role)
    {
        var allowedRole = allowedChannelRoles.Where(r => r.Id == role.Id).FirstOrDefault();
        var disallowedRole = disallowedChannelRoles.Where(r => r.Id == role.Id).FirstOrDefault();

        if (allowedRole is null && disallowedRole is null)
        {
            allowedChannelRoles.Add(role);
        }
        else if (allowedRole is not null)
        {
            allowedChannelRoles.Remove(role);
            disallowedChannelRoles.Add(role);
        }
        else if (disallowedRole is not null)
        {
            disallowedChannelRoles.Remove(role);
            allowedChannelRoles.Add(role);
        }
        else
        {
            throw new Exception("Unexpected condition");
        }
    }

    private string GetRoleClass(RoleModel role)
    {
        if (allowedChannelRoles.Contains(role))
        {
            return "in-allowed-roles";
        }

        return "in-disallowed-roles";
    }

    private bool IsUserOwner()
    {
        if (loggedInUser is null || server is null)
        {
            return false;
        }

        if (loggedInUser.Id == server.Owner.Id)
        {
            return true;
        }

        return false;
    }

    private bool CanCreateChannel()
    {
        if (IsUserOwner())
        {
            return true;
        }

        if (role is not null && role.CanCreateChannel)
        {
            return true;
        }

        return false;
    }

    private bool HasAnyPermissions()
    {
        if (IsUserOwner())
        {
            return true;
        }

        if (CanCreateChannel())
        {
            return true;
        }

        return false;
    }
}
