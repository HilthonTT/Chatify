@page "/ServerSettings/CreateChannel/{Id}"
@inject IChannelData channelData
@inject IAuditLogData auditLogData
@inject IUserData userData
@inject IServerData serverData
@inject IRoleData roleData
@inject IBanData banData
@inject ICodeGenerator codeGenerator
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

@if (ban is null)
{
    @if (HasAnyPermissions())
    {
        <h1 class="page-heading mb-4">Create A Channel For @server?.ServerName</h1>

        <div class="rounded rounded-3">
            <div class="card-body">
                <div class="row justify-content-center">
                    <div class="col-lg-10 col-md-8 bg-dark p-4">
                        <div class="row">
                            <div class="col-11">
                                <EditForm Model="creatingChannel" OnValidSubmit="Create">
                                    <DataAnnotationsValidator />
                                    <div class="row">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold text-uppercase" for="channel-name">Channel Name</label>
                                            <div class="mt-1">Name your channel's name</div>
                                            <ValidationMessage For="(() => creatingChannel.ChannelName)"/>
                                            <InputText class="form-control bg-dark text-white input-section" id="channel-name" 
                                                @bind-Value="creatingChannel.ChannelName"/>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label fw-bold text-uppercase" for="channel-description">Channel Description</label>
                                            <div class="mt-1">Describe your channel's purpose. What kind of discussion is it related to?</div>
                                            <ValidationMessage For="(() => creatingChannel.ChannelDescription)"/>
                                            <InputTextArea class="form-control bg-dark text-white input-section" id="channel-description"
                                                @bind-Value="creatingChannel.ChannelDescription"/>
                                        </div>
                                        <div class="center-children">
                                            <button class="btn btn-secondary btn-lg text-uppercase mt-4" type="submit">
                                                Create Channel
                                            </button>
                                        </div>
                                    </div>
                                </EditForm>
                            </div>
                            <div class="col-1">
                                <div class="close-button-section">
                                    <button class="btn btn-close btn-close-white" @onclick="ClosePage"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <NotAuthorized />
    }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateChannelModel creatingChannel = new();
    private ServerModel server;
    private RoleModel role;
    private UserModel loggedInUser;
    private BanModel ban;

    private List<RoleModel> allowedChannelRoles = new();
    private List<RoleModel> disallowedChannelRoles = new();

    protected override async Task OnInitializedAsync()
    {
        server = await serverData.GetServerAsync(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);   
        }
        if (server is not null && loggedInUser is not null)
        {
            role = await roleData.GetUserServerRoleAsync(loggedInUser, server);
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo($"/ServerSettings/{server.Id}");
    }

    private async Task Create()
    {
        string objectId = await codeGenerator.GenerateChannelIdentifierAsync();

        ChannelModel c = new()
        {
            ObjectIdentifier = objectId,
            ChannelName = creatingChannel.ChannelName,
            ChannelDescription = creatingChannel.ChannelDescription,
            Server = server,
            AllowedRoles = allowedChannelRoles,
            DisallowedRoles = disallowedChannelRoles,
        };

        await channelData.CreateChannel(c);
        var newChannel = await channelData.GetChannelObjectIdAsync(objectId);
        server.Channels.Add(newChannel);
        await serverData.UpdateServer(server);

        creatingChannel = new();
        AuditLogModel a = new()
        {
            Name = "Channel Creation",
            Description = $"{loggedInUser.DisplayName} has created channel {c.ChannelName}",
            User = new BasicUserModel(loggedInUser),
            Server = server,
            DateModified = DateTime.UtcNow,
        };

        await auditLogData.CreateAuditLog(a);
        allowedChannelRoles.Clear();
        disallowedChannelRoles.Clear();
    }

    private bool IsUserOwner()
    {
        if (loggedInUser is null || server is null)
        {
            return false;
        }

        if (loggedInUser.Id == server.Owner.Id)
        {
            return true;
        }

        return false;
    }

    private bool CanCreateChannel()
    {
        if (IsUserOwner())
        {
            return true;
        }

        if (role is not null && role.CanCreateChannel)
        {
            return true;
        }

        return false;
    }

    private bool HasAnyPermissions()
    {
        if (IsUserOwner())
        {
            return true;
        }

        if (CanCreateChannel())
        {
            return true;
        }

        return false;
    }
}
