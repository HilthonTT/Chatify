@page "/conversation/{Id}"
@using Microsoft.AspNetCore.SignalR.Client;
@inject IConversationData conversationData
@inject IUserData userData
@inject IMessageData messageData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@implements IAsyncDisposable

<h1>@conversation?.GroupName</h1>


<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="row">
            <div class="col-11">
                <input type="text" placeholder="Message @conversation?.GroupName"
                    aria-label="Message Box" class="form-control"
                    @bind-value="messageText"/>
            </div>
            <div class="col-1">
                <button class="btn btn-success form-control"
                    @onclick="SendMessage" disabled="@(IsConnected is false)">Send</button>
            </div>
        </div>
    </div>
</div>

<button class="btn btn-danger" @onclick="JoinConversation">Join conv.</button>

<div class="row">
    <div class="col-md-10 col-xl-12">
        @if (messages is not null)
        {
            <Virtualize Items="messages" Context="m" OverscanCount="10">
                <div>
                    @if (chosenMessage is null)
                    {
                        <div>
                            <div>@m.Sender.FullName</div>
                        </div>
                        <div>
                            <div>@m.Text</div>
                        </div>
                        <div>
                            <div>Sended at: @m.Timestamp.ToString("dd-MM-yyyy HH:mm")</div>
                        </div>
                        @if (m.Sender.Id == loggedInUser?.Id)
                        {
                            <div>
                                <button class="btn btn-danger"
                                    @onclick="(() => OnMessageClick(m))">
                                    Edit
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div>
                            <div>@m.Sender.FullName</div>
                        </div>
                        <div>
                            <div>@m.Text</div>
                        </div>
                        <div>
                            <div>Sended at: @m.Timestamp.ToString("dd-MM-yyyy HH:mm")</div>
                        </div>
                    }
                </div>
            </Virtualize>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private HubConnection? hubConnection;

    private string messageText = "";
    private string editingMessageText = "";
    private string searchText = "";
    private bool isSortedByNew = true;
    private ConversationModel conversation;
    private List<MessageModel> messages = new();
    private UserModel loggedInUser;
    private MessageModel chosenMessage;

    protected override async Task OnInitializedAsync()
    {
        conversation = await conversationData.GetConversationAsync(Id);
        messages = await messageData.GetAllMessagesAsync();
        messages = messages.Where(m => m.Conversation.Id == conversation.Id).ToList();
        loggedInUser = await userData.GetUserFromAuthenticationAsync("abc-123");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<MessageModel>("ReceiveMessage", message =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinConversation()
    {
        await hubConnection.InvokeAsync("JoinConversation", conversation);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterMessages();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(messageText));
        messageText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(messageText), messageText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterMessages()
    {
        var output = await messageData.GetAllMessagesAsync();
        output = output.Where(m => m.Conversation?.Id == Id).ToList();

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(m => m.Text.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(c => c.Timestamp).ToList();
        }
        else
        {
            output = output.OrderBy(c => c.Timestamp).ToList();
        }

        messages = output;
        await SaveFilterState();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageText))
        {
            return;
        }

        MessageModel message = new()
        {
            Sender = new BasicUserModel(loggedInUser),
            Text = messageText,
            Receivers = conversation.Participants,
            Conversation = conversation,
            Archived = false,
        };

        await messageData.CreateMessage(message);

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", message);
        }

        messageText = "";
    }

    private async Task UpdateMessage()
    {
        chosenMessage.Text = editingMessageText;
        await messageData.UpdateMessageAsync(chosenMessage);
        chosenMessage = null;
    }

    private async Task ArchiveMessage()
    {
        chosenMessage.Archived = true;
        await messageData.UpdateMessageAsync(chosenMessage);
        chosenMessage = null;
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterMessages();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterMessages();
    }

    private void OnMessageClick(MessageModel message)
    {
        chosenMessage = message;
        editingMessageText = message.Text;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
