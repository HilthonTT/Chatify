@page "/ConversationInviteModal/{Id}"
@inject IConversationData conversationData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1>Invite Friends!</h1>

@if (loggedInUser is not null && conversation?.Participants.Contains(new BasicUserModel(loggedInUser)) is false)
{
    <div class="alert alert-danger">
        You are not allowed to view this page.
    </div>
}
else
{
    <div class="row justify-content-center">
        <div class="col-xl-12 col-lg-10">
            <button class="btn btn-close" @onclick="ClosePage" />
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private ConversationModel conversation;
    private UserModel loggedInUser;
    private List<UserModel> users;
    private List<BasicUserModel> participants;

    private string searchUserText = "";

    protected override async Task OnInitializedAsync()
    {
        conversation = await conversationData.GetConversationAsync(Id);
        loggedInUser = await userData.GetUserFromAuthenticationAsync("abc-123");
        users = await userData.GetAllUsersAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterUsers();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchUserText));
        searchUserText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchUserText), searchUserText);
    }

    private async Task FilterUsers()
    {
        var output = await userData.GetAllUsersAsync();

        if (string.IsNullOrWhiteSpace(searchUserText) is false)
        {
            output.Where(p => p.FirstName.Contains(searchUserText, StringComparison.InvariantCultureIgnoreCase) ||
                p.LastName.Contains(searchUserText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        users = output;
        await SaveFilterState();
    }

    private async Task OnSearchUserInput(string searchInput)
    {
        searchUserText = searchInput;
        await FilterUsers();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task SaveParticipants()
    {
        if (participants.Count > 0)
        {
            return;
        }

        conversation.Participants = participants;
        
        await conversationData.UpdateConversation(conversation, loggedInUser);
        participants = new();
        ClosePage();
    }
}