@page "/UpdateConversation/{Id}"
@attribute [Authorize]
@inject IConversationData conversationData
@inject ICategoryData categoryData
@inject IUserData userData
@inject IBanData banData
@inject IConfiguration config
@inject IAuditLogData auditLogData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime JSRuntime

@if (ban is null)
{
   <h1 class="page-heading mb-4">Update @conversation?.GroupName</h1>

    @if (loggedInUser?.Id != conversation?.Owner.Id)
    {
        <NotAuthorized />
    }
    else
    {
        <div class="modal fade" id="conversationModal" tabindex="-1" role="dialog" aria-labelledby="conversationModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
            <div class="modal-content bg-dark text-white"> 
                <div class="modal-header">
                    <h5 class="modal-title" id="conversationModalLongTitle">
                        Edit @conversation?.GroupName
                    </h5>
                    <button type="button" class="btn-close btn-close-white text-white" data-dismiss="modal" aria-label="Close" />
                    </div>
                    <div class="modal-body">
                        <EditForm Model="editingConversation" OnValidSubmit="(async() => await UpdateConversation())">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="mb-3">
                                    <label class="form-label fw-bold text-uppercase" for="server-name">Server Name</label>
                                    <div class="mt-1">Edit your server's name</div>
                                    <ValidationMessage For="(() => editingConversation.GroupName)"/>
                                    <InputText class="form-control bg-dark text-white input-section" id="server-name" 
                                        @bind-Value="editingConversation.GroupName"/>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-bold text-uppercase" for="server-icon">Conversation Icon</label>
                                    <div class="mt-1">Select an image for your conversation. This is not required.</div>
                                    <ValidationMessage For="(() => editingConversation.PictureName)"/>
                                    <InputFile OnChange="LoadFiles"
                                        class="form-control bg-dark text-light input-section"
                                        accept=".png,.jpg,.jpeg"/>
                                </div>
                                <div class="center-children">
                                    <button class="btn btn-secondary btn-lg text-uppercase mt-4" 
                                        type="submit">
                                        Update
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                    <button type="button" 
                        class="btn btn-secondary" 
                        data-dismiss="modal">
                        Close
                    </button>
                    </div>
                </div>
            </div>
        </div>

        @if (conversation is not null)
        {
            <div class="rounded rounded-3">
                <div class="card-body">
                    <div class="row justify-content-center">
                        <div class="col-lg-10 col-md-8 card bg-dark p-4">
                            <div class="row">
                                <div class="col-11">
                                    <div>
                                        <div class="center-children mt-2">
                                            @if (string.IsNullOrWhiteSpace(conversation.PictureName) is false)
                                            {
                                                <img src="@CreateWebPath(conversation.PictureName)"
                                                class="img-fluid w-25 h-25 border border-secondary rounded-circle" 
                                                alt="@conversation.OriginalPictureName">
                                            }
                                            else
                                            {
                                                <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                                class="img-fluid w-25 h-25 border border-secondary rounded-circle" 
                                                alt="Placeholder Image">
                                            }
                                        </div>
                                        <h2 class="conversation-title text-center">@conversation.GroupName</h2>
                                        <p class="conversation-info text-center">The Owner: @conversation.Owner.DisplayName</p>
                                        <p class="conversation-info text-center">This was created on: @conversation.DateCreated.ToString("dd/MM/yyyy")</p>
                                        <button class="btn btn-secondary w-100"
                                            data-toggle="modal" data-target="#conversationModal">
                                                Edit Conversation
                                        </button>
                                    </div>
                                </div>
                                <div class="col-1">
                                    <div class="close-button-section">
                                        <button class="btn btn-close btn-close-white" @onclick="(() => ClosePage(conversation))"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateConversationModel editingConversation = new();

    private ConversationModel conversation;
    private List<CategoryModel> categories;
    private UserModel loggedInUser;
    private BanModel ban;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile? file;
    private string fileName = "";
    private string fileExtension = "";

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategoriesAsync();
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        conversation = await conversationData.GetConversationAsync(Id);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
        if (conversation is not null)
        {
            editingConversation.GroupName = conversation.GroupName;
            editingConversation.CategoryId = conversation.Category.Id;
            editingConversation.PictureName = conversation.PictureName;
        }
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "messageModal");
    }

    private async Task UpdateConversation()
    {
        string relativePath = await CaptureFile();
        string groupName = conversation.GroupName;
        string pictureName = conversation.PictureName;
        string originalPictureName = conversation.OriginalPictureName;
        string pictureExtension = conversation.PictureExtension;

        conversation.GroupName = editingConversation.GroupName;
        conversation.Category = categories.Where(c => c.Id == editingConversation.CategoryId).FirstOrDefault();
        if (file is not null)
        {
            conversation.PictureName = relativePath;
            conversation.OriginalPictureName = fileName;
            conversation.PictureExtension = fileExtension;
        }
        else
        {
            conversation.PictureName = pictureName;
            conversation.OriginalPictureName = originalPictureName;
            conversation.PictureExtension = pictureExtension;
        }

        AuditLogModel a = new()
        {
            Name = "Conversation Details Updated",
            Description = $"{loggedInUser.DisplayName} has updated conversation of ID {conversation.Id}'s details",
            OldValues = 
                $@"Conversation name: {conversation.GroupName} 
                Conversation Picture: {conversation.PictureName}
                Original picture name: {conversation.OriginalPictureName}",
            NewValues = 
                $@"Conversation name: {groupName} 
                Conversation Picture: {pictureName} 
                Original picture name: {originalPictureName}",
            User = new BasicUserModel(loggedInUser),
            Conversation = conversation,
            DateModified = DateTime.UtcNow,
        };

        await conversationData.UpdateConversation(conversation);
        await auditLogData.CreateAuditLog(a);
        file = null;
        await CloseModal();
    }

    private void ClosePage(ConversationModel conversation)
    {
        navManager.NavigateTo($"/Conversation/{conversation.Id}");
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage"), 
                loggedInUser.Email, 
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch
        {
            throw;
        }
    }
}
