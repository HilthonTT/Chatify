@page "/PrivateConversation/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@inject IPrivateConversationData privateConversationData
@inject IUserData userData
@inject IPrivateMessageData privateMessageData
@inject IBanData banData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@inject IConfiguration config
@inject ICodeGenerator codeGenerator
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="modal fade" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="messageModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
        <div class="modal-content bg-dark text-white"> 
            <div class="modal-header">
                <h5 class="modal-title" id="messageModalLongTitle">
                    Edit @selectedMessage?.Text
                </h5>
                <button type="button" class="btn-close btn-close-white" data-dismiss="modal" aria-label="Close" />
            </div>
            <div class="modal-body">
                <EditForm Model="model" OnValidSubmit="(async() => await UpdateMessage(selectedMessage))">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="mb-3">
                            <label class="form-label fw-bold text-uppercase" for="message-text">Message Text</label>
                            <div class="mt-1">Edit your message</div>
                            <ValidationMessage For="(() => model.Text)"/>
                            <InputText class="form-control bg-dark text-white input-section border-warning" id="message-text" 
                                @bind-Value="model.Text"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold text-uppercase" for="message-file">Insert your message file</label>
                            <div class="mt-1 mb-2">
                                <div>Select a file you want to associate with the message.</div>
                                <div class="text-danger">Leave blank to leave previous file.</div>
                            </div>
                            <ValidationMessage For="(() => model)"/>
                            <InputFile OnChange="LoadFiles"
                                class="form-control bg-dark text-white input-section border-warning" 
                                id="message-file"
                                accept=".png,.jpg,.jpeg,.txt,.pdf"/>
                        </div>
                        <div class="center-children">
                            <button class="btn btn-outline-warning btn-lg text-uppercase mt-4" type="submit">
                                Update
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" 
                    class="btn btn-secondary" 
                    data-dismiss="modal" 
                    @onclick="(() => selectedMessage = null)">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

@if (ban is null)
{
    <h1 class="page-heading mb-4">@conversation?.GroupName</h1>

    @if (loggedInUser is not null && conversation is not null)
    {
        if (conversation.FirstParticipant.Id != loggedInUser.Id && conversation.LastParticipant.Id != loggedInUser.Id)
        {
            <NotAuthorized />
        }
        else
        {  
            <div class="container-fluid vh-100 d-flex flex-column">
              <div class="row flex-grow-1">
                <div class="col-md-8 col-xl-10 messages-container">
                  @if (messages is not null)
                  {
                    <Virtualize Items="messages" Context="m" OverscanCount="10">
                      <PrivateMessage @key="m.Id" Message="m" LoggedInUser="loggedInUser"/>
                    </Virtualize>
                    <div class="messages-mb" />
                  }
                </div>
                <div class="col-md-4 col-xl-2">
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Participants</h3>
                        <ul class="list-group text-white">
                            <li class="list-group-item bg-secondary mb-2 clickable text-white" 
                                @onclick="(() => UserDetailsPage(conversation?.FirstParticipant))">
                                <span class="oi oi-person me-1"></span>
                                @conversation?.FirstParticipant.DisplayName
                            </li>
                            <li class="list-group-item bg-secondary clickable text-white" 
                                @onclick="(() => UserDetailsPage(conversation?.LastParticipant))">
                                <span class="oi oi-person me-1"></span>
                                @conversation?.LastParticipant.DisplayName
                            </li>
                        </ul>
                    </div>
                </div>
              </div>
              <div class="row fixed-bottom mb-4 mx-2">
                <EditForm Model="model" OnValidSubmit="SendMessage">
                    <DataAnnotationsValidator />
                    <div class="col-xl-12 col-lg-12">
                      <div class="row">
                        <ValidationMessage For="(() => model.Text)"/>
                        <div class="col-8">
                          <InputText placeholder="@($"Message {conversation?.GroupName}")" aria-label="Message Box"
                            class="form-control bg-dark text-light input-section" @bind-Value="model.Text" />
                        </div>
                        <div class="col-2">
                            <InputFile OnChange="LoadFiles" 
                                class="form-control bg-dark text-light input-section"
                                accept=".png,.jpg,.jpeg,.txt,.pdf" />
                        </div>
                        <div class="col-2">
                          <button type="submit" class="btn btn-outline-secondary form-control" 
                              disabled="@(IsConnected is false)">
                              Send
                          </button>
                        </div>
                      </div>
                    </div>
                </EditForm>
              </div>
            </div>
        }
    }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateMessageModel model = new();
    private HubConnection? hubConnection;

    private string searchText = "";
    private bool isSortedByNew = true;
    private PrivateConversationModel conversation;
    private List<PrivateMessageModel> messages;
    private UserModel loggedInUser;
    private PrivateMessageModel selectedMessage;
    private BanModel ban;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile? file;
    private string errorMessage = "";
    private string fileName = "";
    private string fileExtension = "";

    protected override async Task OnInitializedAsync()
    {
        conversation = await privateConversationData.GetConversationAsync(Id);
        if (conversation is not null)
        {
            messages = await privateMessageData.GetConversationMessagesAsync(conversation);
        }

        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/privateconversationhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<PrivateMessageModel>("ReceiveMessage", OnReceiveMessage);

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinConversation", conversation);
    }

    private void OnReceiveMessage(PrivateMessageModel message)
    {
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            if (conversation is not null)
            {
                await FilterMessages();
            }
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterMessages()
    {
        var output = await privateMessageData.GetConversationMessagesAsync(conversation);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(m => m.Text.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(c => c.Timestamp).ToList();
        }
        else
        {
            output = output.OrderBy(c => c.Timestamp).ToList();
        }

        messages = output;
        await SaveFilterState();
    }

    private async Task SendMessage()
    {
        try
        {
            errorMessage = "";

            string relativePath = await CaptureFile();
            string objectId = await codeGenerator.GenerateMessageIdentifierAsync();

            PrivateMessageModel m = new()
            {
                ObjectIdentifier = objectId,
                Sender = new BasicUserModel(loggedInUser),
                Text = model.Text,
                FileName = relativePath,
                OriginalFileName = fileName,
                FileExtension = fileExtension,
                Conversation = conversation,
            };

            await privateMessageData.CreateMessage(m);

            if (hubConnection is not null)
            {
                await hubConnection.InvokeAsync("SendMessage", m, conversation);
            }

            file = null;
            fileName = string.Empty;
            fileExtension = string.Empty;
            model = new();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void LoadSelectedMessage(PrivateMessageModel message)
    {
        selectedMessage = message;
        model.Text = message.Text;
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "messageModal");
    }

    private async Task UpdateMessage(PrivateMessageModel message)
    {
        string relativePath = await CaptureFile();
        string oldFileName = message.FileName;
        string oldOriginalFile = message.OriginalFileName;
        string oldExtension = message.FileExtension;

        message.Text = model.Text;
        message.LastEdited = DateTime.UtcNow;
        if (file is not null)
        {
            message.FileName = relativePath;
            message.OriginalFileName = fileName;
            message.FileExtension = fileExtension;
        }
        else
        {
            message.FileName = oldFileName;
            message.OriginalFileName = oldOriginalFile;
            message.FileExtension = oldExtension;
        }

        await privateMessageData.UpdateMessageAsync(message);
        model = new();
        selectedMessage = null;
        file = null;

        await CloseModal();
    }

    private async Task ArchiveMessage(PrivateMessageModel message)
    {
        messages.Remove(selectedMessage);
        selectedMessage.Archived = true;
        await privateMessageData.UpdateMessageAsync(selectedMessage);
        selectedMessage = null;
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterMessages();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterMessages();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

    private void UserDetailsPage(BasicUserModel user)
    {
        navManager.NavigateTo($"/userDetails/{user.Id}");
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        errorMessage = "";

        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(), 
                Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>(
                "FileStorage"),
                loggedInUser.Email,
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errorMessage = $"File: {file.Name} Error: {ex.Message}";
            throw;
        }
    }
}
