@page "/PrivateConversation/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@inject IPrivateConversationData privateConversationData
@inject IUserData userData
@inject IMessageData messageData
@inject IBanData banData
@inject IServerData serverData
@inject IConfiguration config
@inject OidGenerator oidGenerator
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@implements IAsyncDisposable

<ModalComponent Id="invitationModal" Title="Select the server which you want to invite people.">
    <ChildContent>
        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
        {
            <div class="text-danger">@errorMessage</div>
        }
        <input type="text" placeholder="Search"
        aria-label="Search Box" class="form-control bg-dark text-light input-section mb-3"
        @oninput="(async(txt) => await OnSearchInput((string)txt.Value))"/>
            <div class="center-children mb-3">
            <button class="btn btn-secondary btn-lg text-uppercase"
                @onclick="SendInvite">
                Send Invite
            </button>
        </div>
        @if (servers?.Count > 0)
        {
            <Virtualize Items="servers" Context="s" OverscanCount="10">
                <div class="card bg-dark clickable @GetServerClass(s) mb-4" 
                    @onclick="(() => selectedServer = s)">
                    <div class="row g-0">
                        <div class="col-md-1">
                            <div class="p-1">
                                @if (string.IsNullOrWhiteSpace(s.PictureName) is false)
                                {
                                    <div class="text-center p-3">
                                        <img src="@CreateWebPath(s.PictureName)" 
                                            class="card-img-top rounded-circle clickable" 
                                            alt="@s.OriginalPictureName"
                                            style="width: 100px; height: 100px;">
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center p-3">
                                        <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                            class="card-img-top rounded-circle clickable" 
                                            alt="Placeholder Image"
                                            style="width: 100px; height: 100px;">
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-11 ">
                            <div class="card-body">
                                <h5 class="card-title text-end">@s.ServerName</h5>
                                <p class="card-text text-end">
                                    @s.ServerDescription
                                </p>
                                <p class="card-text text-end">
                                    Date Created: @s.DateCreated.ToString("dd/MM/yyyy")
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
        else
        {
            <div class="center-children">
                <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </ChildContent>
</ModalComponent>

@if (ban is null)
{
    <h1 class="page-heading mb-4">@conversation?.GroupName</h1>

    @if (loggedInUser is not null && conversation is not null)
    {
        if (IsInConversation() is false || IsBlocked())
        {
            <NotAuthorized />
        }
        else
        {  
            <div class="container-fluid vh-100 d-flex flex-column">
              <span class="text-uppercase">@GetNonReadMessagesCount()</span>
              <div class="row flex-grow-1">
                <div class="col-md-8 col-xl-10 messages-container">
                  <CascadingValue Value="RequestChanged">
                      @if (messages is not null)
                      {
                        <Virtualize Items="messages" Context="m" OverscanCount="10">
                          <MessageComponent @key="m.Id" 
                                NonReadMessages="nonReadMessages" 
                                Message="m" 
                                Messages="messages"
                                RequestChanged="RequestChanged"
                                LoggedInUser="loggedInUser"/>
                        </Virtualize>
                        <div class="messages-mb" />
                      }
                  </CascadingValue>
                </div>
                <div class="col-md-4 col-xl-2">
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Participants</h3>
                        <ul class="list-group text-white">
                            <li class="list-group-item bg-secondary mb-2 clickable text-white" 
                                @onclick="(() => UserDetailsPage(conversation?.FirstParticipant))">
                                <span class="oi oi-person me-1"></span>
                                @conversation?.FirstParticipant.DisplayName
                            </li>
                            <li class="list-group-item bg-secondary clickable text-white" 
                                @onclick="(() => UserDetailsPage(conversation?.LastParticipant))">
                                <span class="oi oi-person me-1"></span>
                                @conversation?.LastParticipant.DisplayName
                            </li>
                        </ul>
                    </div>
                </div>
              </div>
              <div class="row fixed-bottom mb-4 mx-2">
                <EditForm Model="model" OnValidSubmit="SendMessage">
                    <DataAnnotationsValidator />
                    <ValidationMessage For="(() => model.Text)"/>
                    <div class="col-xl-12 col-lg-12">
                      <div class="row">
                        <div class="col-2"></div>
                        <div class="col-1 message-input-controls">                      
                            <button type="button" 
                                class="btn btn-outline-secondary form-control"
                                data-toggle="modal"
                                data-target="#invitationModal">
                                Send Server Invite
                            </button>
                        </div>
                        <div class="col-6">
                          <InputTextArea placeholder="@($"Message {conversation?.GroupName}")" aria-label="Message Box"
                            class="form-control bg-dark text-light input-section" @bind-Value="model.Text" />
                        </div>
                        <div class="col-2 message-input-controls">
                            <InputFile OnChange="LoadFiles" 
                                class="form-control bg-dark text-light input-section"
                                accept=".png,.jpg,.jpeg,.txt,.pdf" />
                        </div>
                        <div class="col-1 message-input-controls">
                          <button type="submit" 
                              class="btn btn-outline-secondary form-control" 
                              disabled="@(IsConnected is false)">
                              Send
                          </button>
                        </div>
                      </div>
                    </div>
                </EditForm>
              </div>
            </div>
        }
    }
}
else
{
    <Banned />
}


