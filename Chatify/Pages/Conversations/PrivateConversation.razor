@page "/PrivateConversation/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@inject IPrivateConversationData privateConversationData
@inject IUserData userData
@inject IMessageData messageData
@inject IBanData banData
@inject IServerData serverData
@inject IConfiguration config
@inject ICodeGenerator codeGenerator
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@implements IAsyncDisposable

<div class="modal fade" id="invitationModal" tabindex="-1" role="dialog" aria-labelledby="invitationModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="invitationModalLongTitle">
                Select the server which you want to invite people.
            </h5>
            <button type="button" class="btn-close btn-close-white text-white" data-dismiss="modal" aria-label="Close" />
            </div>
            <div class="modal-body">
                @if (string.IsNullOrWhiteSpace(errorMessage) is false)
                {
                    <div class="text-danger">@errorMessage</div>
                }
                <input type="text" placeholder="Search"
                aria-label="Search Box" class="form-control bg-dark text-light input-section mb-3"
                @oninput="(async(txt) => await OnSearchInput((string)txt.Value))"/>
                 <div class="center-children mb-3">
                    <button class="btn btn-secondary btn-lg text-uppercase"
                        @onclick="SendInvite">
                        Send Invite
                    </button>
                </div>
                @if (servers?.Count > 0)
                {
                    <Virtualize Items="servers" Context="s" OverscanCount="10">
                        <div class="card bg-dark clickable @GetServerClass(s) mb-4" 
                            @onclick="(() => selectedServer = s)">
                            <div class="row g-0">
                                <div class="col-md-1">
                                    <div class="p-1">
                                        @if (string.IsNullOrWhiteSpace(s.PictureName) is false)
                                        {
                                            <div class="text-center p-3">
                                                <img src="@CreateWebPath(s.PictureName)" 
                                                    class="card-img-top rounded-circle clickable" 
                                                    alt="@s.OriginalPictureName"
                                                    style="width: 100px; height: 100px;">
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-center p-3">
                                                <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                                    class="card-img-top rounded-circle clickable" 
                                                    alt="Placeholder Image"
                                                    style="width: 100px; height: 100px;">
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-11 ">
                                    <div class="card-body">
                                        <h5 class="card-title text-end">@s.ServerName</h5>
                                        <p class="card-text text-end">
                                            @s.ServerDescription
                                        </p>
                                        <p class="card-text text-end">
                                            Date Created: @s.DateCreated.ToString("dd/MM/yyyy")
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Virtualize>
                }
                else
                {
                    <div class="center-children">
                        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
            <button type="button" 
                class="btn btn-secondary" 
                data-dismiss="modal">
                Close
            </button>
            </div>
        </div>
    </div>
</div>

@if (ban is null)
{
    <h1 class="page-heading mb-4">@conversation?.GroupName</h1>

    @if (loggedInUser is not null && conversation is not null)
    {
        if (conversation.FirstParticipant.Id != loggedInUser.Id && conversation.LastParticipant.Id != loggedInUser.Id)
        {
            <NotAuthorized />
        }
        else
        {  
            <div class="container-fluid vh-100 d-flex flex-column">
              <div class="row flex-grow-1">
                <div class="col-md-8 col-xl-10 messages-container">
                  @if (messages is not null)
                  {
                    <Virtualize Items="messages" Context="m" OverscanCount="10">
                      <MessageComponent @key="m.Id" Message="m" LoggedInUser="loggedInUser"/>
                    </Virtualize>
                    <div class="messages-mb" />
                  }
                </div>
                <div class="col-md-4 col-xl-2">
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Participants</h3>
                        <ul class="list-group text-white">
                            <li class="list-group-item bg-secondary mb-2 clickable text-white" 
                                @onclick="(() => UserDetailsPage(conversation?.FirstParticipant))">
                                <span class="oi oi-person me-1"></span>
                                @conversation?.FirstParticipant.DisplayName
                            </li>
                            <li class="list-group-item bg-secondary clickable text-white" 
                                @onclick="(() => UserDetailsPage(conversation?.LastParticipant))">
                                <span class="oi oi-person me-1"></span>
                                @conversation?.LastParticipant.DisplayName
                            </li>
                        </ul>
                    </div>
                </div>
              </div>
              <div class="row fixed-bottom mb-4 mx-2">
                <EditForm Model="model" OnValidSubmit="SendMessage">
                    <DataAnnotationsValidator />
                    <ValidationMessage For="(() => model.Text)"/>
                    <div class="col-xl-12 col-lg-12">
                      <div class="row">
                        <div class="col-1 message-input-controls">                      
                            <button type="button" 
                                class="btn btn-outline-secondary form-control"
                                data-toggle="modal"
                                data-target="#invitationModal">
                                Send Server Invite
                            </button>
                        </div>
                        <div class="col-7">
                          <InputTextArea placeholder="@($"Message {conversation?.GroupName}")" aria-label="Message Box"
                            class="form-control bg-dark text-light input-section" @bind-Value="model.Text" />
                        </div>
                        <div class="col-2 message-input-controls">
                            <InputFile OnChange="LoadFiles" 
                                class="form-control bg-dark text-light input-section"
                                accept=".png,.jpg,.jpeg,.txt,.pdf" />
                        </div>
                        <div class="col-2 message-input-controls">
                          <button type="submit" 
                              class="btn btn-outline-secondary form-control" 
                              disabled="@(IsConnected is false)">
                              Send
                          </button>
                        </div>
                      </div>
                    </div>
                </EditForm>
              </div>
            </div>
        }
    }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateMessageModel model = new();
    private HubConnection? hubConnection;

    private string searchText = "";
    private bool isSortedByNew = true;
    private PrivateConversationModel conversation;
    private List<MessageModel> messages;
    private List<ServerModel> servers;
    private ServerModel selectedServer;
    private UserModel loggedInUser;
    private BanModel ban;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile? file;
    private string errorMessage = "";
    private string fileName = "";
    private string fileExtension = "";

    protected override async Task OnInitializedAsync()
    {
        conversation = await privateConversationData.GetConversationAsync(Id);
        if (conversation is not null)
        {
            messages = await messageData.GetPrivateConversationMessagesAsync(conversation);
        }

        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
            servers = await serverData.GetUserServersAsync(loggedInUser.Id);
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/conversationhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<MessageModel>("ReceiveMessage", OnReceiveMessage);

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinConversation", conversation);
    }

    private void OnReceiveMessage(MessageModel message)
    {
        file = null;
        fileName = "";
        fileExtension = "";
        model = new();
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            if (conversation is not null)
            {
                await FilterMessages();
            }
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterMessages()
    {
        var output = await messageData.GetPrivateConversationMessagesAsync(conversation);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(m => m.Text.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(c => c.Timestamp).ToList();
        }
        else
        {
            output = output.OrderBy(c => c.Timestamp).ToList();
        }

        messages = output;
        await SaveFilterState();
    }

    private async Task FilterServers()
    {
        var output = await serverData.GetUserServersAsync(loggedInUser.Id);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(
                s => s.ServerName.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ServerDescription.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderBy(s => s.DateCreated).ToList();
        }

        servers = output;
        await SaveFilterState();
    }

    private async Task SendMessage()
    {
        try
        {
            errorMessage = "";

            string relativePath = await CaptureFile();
            string objectId = await codeGenerator.GenerateMessageIdentifierAsync();

            MessageModel m = new()
            {
                ObjectIdentifier = objectId,
                Sender = new BasicUserModel(loggedInUser),
                Text = model.Text,
                FileName = relativePath,
                OriginalFileName = fileName,
                FileExtension = fileExtension,
                PrivateConversation = conversation,
            };

            await messageData.CreateMessage(m);

            if (hubConnection is not null)
            {
                await hubConnection.InvokeAsync("SendMessage", m, conversation);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task SendInvite()
    {
        errorMessage = "";

        if (selectedServer is null)
        {
            errorMessage = "You must select a server.";
            return;
        }

        string objectId = await codeGenerator.GenerateMessageIdentifierAsync();

        MessageModel m = new()
        {
            ObjectIdentifier = objectId,
            Sender = new BasicUserModel(loggedInUser),
            Text = $"I've just invited you in {selectedServer.ServerName}",
            ServerInvitation = selectedServer,
            PrivateConversation = conversation,
            Archived = false,
        };

        await messageData.CreateMessage(m);

        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("SendMessage", m, conversation);
        }
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "messageModal");
    }

    private async Task UpdateMessage(MessageModel message)
    {
        string relativePath = await CaptureFile();
        string oldFileName = message.FileName;
        string oldOriginalFile = message.OriginalFileName;
        string oldExtension = message.FileExtension;

        message.Text = model.Text;
        message.LastEdited = DateTime.UtcNow;
        if (file is not null)
        {
            message.FileName = relativePath;
            message.OriginalFileName = fileName;
            message.FileExtension = fileExtension;
        }
        else
        {
            message.FileName = oldFileName;
            message.OriginalFileName = oldOriginalFile;
            message.FileExtension = oldExtension;
        }

        await messageData.UpdateMessageAsync(message);
        model = new();
        file = null;

        await CloseModal();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterMessages();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterMessages();
        await FilterServers();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void UserDetailsPage(BasicUserModel user)
    {
        navManager.NavigateTo($"/userDetails/{user.Id}");
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        errorMessage = "";

        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(), 
                Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>(
                "FileStorage"),
                loggedInUser.Email,
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errorMessage = $"File: {file.Name} Error: {ex.Message}";
            throw;
        }
    }

    private string GetServerClass(ServerModel server)
    {
        if (selectedServer?.Id == server.Id)
        {
            return "in-allowed-roles";
        }

        return "in-disallowed-roles";
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }
}
