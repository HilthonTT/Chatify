@page "/"
@inject AuthenticationStateProvider authProvider
@inject IConversationData conversationData
@inject IUserData userData
@inject ICategoryData categoryData
@inject IPrivateConversationData privateConversationData
@inject ICodeGenerator codeGenerator
@inject IBanData banData
@inject IConfiguration config
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

@if (ban is null)
{
    <h1 class="text-uppercase fw-bold text-center mb-4 text-light">Conversations</h1>

    <div class="text-center">
        <button class="btn btn-outline-secondary btn-lg text-uppercase" @onclick="LoadCreatePage">Create A Conversation</button>
    </div>
    <div class="row">
        <div class="text-uppercase fw-bold">You are in @conversations?.Count conversations</div>
        <div class="col-md-8 col-xl-12 btn-group">
            <button class="btn text-uppercase fw-bold me-2 @SortedByNewClass(true)" 
                @onclick="(async() => await OrderByNew(true))">
                New
            </button>
            <button class="btn text-uppercase fw-bold @SortedByNewClass(false)" 
                @onclick="(async() => await OrderByNew(false))">
                Popular
            </button>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-md-12 col-xl-12">
            <input type="text" placeholder="Search"
                aria-label="Search Box" class="form-control bg-dark text-light input-section"
                @oninput="(async(txt) => await OnSearchInput((string)txt.Value))"/>
        </div>
        <div class="col-12 d-block d-md-none">
            @if (categories is not null && showCategories)
            {
                <div class="participants-list p-2">
                    <h3 class="fw-bold text-uppercase">Categories</h3>
                    <ul class="list-group">
                        <li class="list-group-item @SelectedCategoryClass() bg-secondary text-white mb-2 clickable" 
                            @onclick="(async() => await OnCategoryClick())">
                            <span class="clickable">
                                <span class="oi @SelectedCategoryIcon() mx-1"></span>
                                <span>All</span>
                            </span>
                        </li>
                        <Virtualize Items="categories" Context="c" OverscanCount="10">
                            <li class="list-group-item @SelectedCategoryClass(c.CategoryName) bg-secondary text-white mb-2 clickable" 
                                @onclick="(async() => await OnCategoryClick(c.CategoryName))">
                                <span class="clickable">
                                    <span class="oi @SelectedCategoryIcon(c.CategoryName) mx-1"></span>
                                    <span>@c.CategoryName</span>
                                </span>
                            </li>
                        </Virtualize>
                    </ul>
                </div>
            }
            else
            {
                <div class="participants-list p-2">
                    <h3 class="fw-bold text-uppercase">Categories</h3>
                    <ul class="list-group">
                        <li class="list-group-item @SelectedCategoryClass(selectedCategory) bg-secondary text-white mb-2 clickable" 
                            @onclick="(() => showCategories = true)">
                            <span class="clickable">
                                <span class="oi @SelectedCategoryIcon(selectedCategory) mx-1"></span>
                                <span>@selectedCategory</span>
                            </span>
                        </li>
                    </ul>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-3 col-xl-2 d-none d-md-block border-white">
            @if (loggedInUser is not null)
            {
                <div class="participants-list p-2">
                    <h3 class="fw-bold text-uppercase">Friends</h3>
                    <ul class="list-group">
                        <Virtualize Items="loggedInUser.Friends" Context="f" OverscanCount="10">
                            <li class="list-group-item bg-secondary text-white mb-2 clickable" 
                                @onclick="(async() => await OpenPrivateConversation(f))">
                                <span class="clickable">
                                    <span class="oi oi-person mx-1"></span>
                                    <span>@f.DisplayName</span>
                                </span>
                            </li>
                        </Virtualize>
                    </ul>
                </div>
            }
        </div>
        <div class="col-md-7 col-xl-8">
            @if (conversations is null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            <div class="row">
                @if (conversations is not null)
                {
                    <Virtualize Items="conversations" Context="c" OverscanCount="10">
                        <ConversationComponent Conversation="c" />
                    </Virtualize>
                }
            </div>
        </div>
        <div class="col-md-3 col-xl-2 d-none d-md-block">
            @if (categories is not null)
            {
                <div class="participants-list p-2">
                    <h3 class="fw-bold text-uppercase">Categories</h3>
                    <ul class="list-group">
                        <li class="list-group-item @SelectedCategoryClass() bg-secondary text-white mb-2 clickable" 
                            @onclick="(async() => await OnCategoryClick())">
                            <span class="clickable">
                                <span class="oi oi-book mx-1"></span>
                                <span>All</span>
                            </span>
                        </li>
                        <Virtualize Items="categories" Context="c" OverscanCount="10">
                            <li class="list-group-item @SelectedCategoryClass(c.CategoryName) bg-secondary text-white mb-2 clickable" 
                                @onclick="(async() => await OnCategoryClick(c.CategoryName))">
                                <span class="clickable">
                                    <span class="oi @SelectedCategoryIcon(c.CategoryName) mx-1"></span>
                                    <span>@c.CategoryName</span>
                                </span>
                            </li>
                        </Virtualize>
                    </ul>
                </div>
            }
        </div>
    </div>
}
else
{
    <Banned />
}


@code {
    private UserModel loggedInUser;
    private List<ConversationModel> conversations;
    private List<CategoryModel> categories;
    private ConversationModel archivingConversation;
    private BanModel ban;
    private string searchText = "";
    private string selectedCategory = "";
    private bool isSortedByNew = true;
    private bool showCategories = false;

    protected override async Task OnInitializedAsync()
    { 
        await LoadAndVerifyUser();
        categories = await categoryData.GetAllCategoriesAsync();
        if (loggedInUser is not null)
        {
            conversations = await conversationData.GetUserConversationsAsync(loggedInUser.Id);
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            @if (loggedInUser is not null)
            {
                await FilterConversations();
            }
            StateHasChanged();
        }
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthenticationAsync(objectId) ?? new();
            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;
            bool isDirty = false;
            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }

            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }

            if (lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }

            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }

            if (email.Equals(loggedInUser.Email) == false)
            {
                isDirty = true;
                loggedInUser.Email = email;
            }

            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    loggedInUser.FriendCode = await codeGenerator.GenerateFriendCodeAsync();
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterConversations()
    {
        var output = await conversationData.GetUserConversationsAsync(loggedInUser.Id);

        if (selectedCategory != "All")
        {
            output = output.Where(c => c.Category?.CategoryName == selectedCategory).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(c => c.GroupName.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(c => c.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(c => c.Participants.Count).ThenByDescending(c => c.DateCreated).ToList();
        }

        conversations = output;
        await SaveFilterState();
    }

    private async Task ArchiveConversation()
    {
        archivingConversation.Archived = true;
        await conversationData.UpdateConversation(archivingConversation);
        conversations.Remove(archivingConversation);
        archivingConversation = null;
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        if (loggedInUser is not null)
        {
            await FilterConversations();
        }
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        if (loggedInUser is not null)
        {
            await FilterConversations();
        }
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        showCategories = false;
        if (loggedInUser is not null)
        {
            await FilterConversations();
        }
    }

    private async Task OpenPrivateConversation(BasicUserModel user)
    {
        var conversation = await privateConversationData.GetUsersConversationAsync(loggedInUser.Id, user.Id); 

        if (conversation is null)
        {
            string objectId = await codeGenerator.GeneratePrivateConversationIdentifierAsync();

            PrivateConversationModel c = new()
            {
                ObjectIdentifier = objectId,
                FirstParticipant = new BasicUserModel(loggedInUser),
                LastParticipant = user,
            };

            await privateConversationData.CreateConversation(c);
            conversation = await privateConversationData.GetConversationObjectIdAsync(objectId);
            navManager.NavigateTo($"/PrivateConversation/{conversation.Id}");
        }
        else
        {
            navManager.NavigateTo($"/PrivateConversation/{conversation.Id}");
        }
    }

    private void LoadCreatePage()
    {
        if (loggedInUser is not null)
        {
            navManager.NavigateTo("/Create");
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private void LoadUserDetails(BasicUserModel user)
    {
        navManager.NavigateTo($"UserDetails/{user.Id}");
    }

    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "btn-secondary";
        }

        return "btn-outline-secondary";
    }

    private string SelectedCategoryClass(string category = "All")
    {
        if (category == selectedCategory)
        {
            return "bg-secondary";
        }

        return "bg-dark";
    }

    private string SelectedCategoryIcon(string category = "All")
    {
        if (category == "All")
        {
            return "oi-book";
        }

        if (category == "Gaming")
        {
            return "oi-bug";
        }

        if (category == "Music")
        {
            return "oi-musical-note";
        }

        if (category == "Sports")
        {
            return "oi-badge";
        }

        if (category == "Sciences")
        {
            return "oi-beaker";
        }

        if (category == "Technology")
        {
            return "oi-monitor";
        }

        return "oi-question-mark";
    }
}