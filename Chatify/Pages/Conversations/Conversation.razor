@page "/conversation/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@inject IConversationData conversationData
@inject IUserData userData
@inject IMessageData messageData
@inject IServerData serverData
@inject IConfiguration config
@inject IBanData banData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@inject ICodeGenerator codeGenerator
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@if (ban is null)
{
    <h1 class="page-heading mb-4">@conversation?.GroupName</h1>

    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <div class="row justify-content-center">
            <div class="col-lg-10 col-md-8">
                <div class="row alert bg-warning text-black" role="alert">
                    <div class="col-11">
                        <h4 class="alert-heading">Error!</h4>
                        <p>@errorMessage</p>
                        <hr>
                        <p class="mb-0">If you think this is a bug, please contact the administrator.</p>
                    </div>
                    <div class="col-1">
                        <div class="close-button-section">
                            <button class="btn btn-close btn-close" @onclick="(() => errorMessage = string.Empty)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (loggedInUser is not null && conversation is not null)
    {
        @if (conversation.Participants.Any(p => p.Id == loggedInUser.Id) is false)
        {
            <NotAuthorized />
        }
        else
        {
            <div class="container-fluid vh-100 d-flex flex-column">
              <div class="row flex-grow-1">
                <div class="col-md-8 col-xl-10 messages-container">
                  @if (messages is not null)
                  {
                    <Virtualize Items="messages" Context="m" OverscanCount="10"> 
                        <MessageComponent @key="m.Id" Message="m" LoggedInUser="loggedInUser"/>
                    </Virtualize>
                    <div class="messages-mb" />
                  }
                </div>
                <div class="col-md-4 col-xl-2">
                    @if (loggedInUser?.Id == conversation?.Owner.Id)
                    {
                        <div class="bg-dark p-2 mb-4 settings-box">
                            <h3>Settings</h3>
                            <button class="btn btn-outline-secondary w-100 mb-2" @onclick="(() => SettingsPage(conversation))">
                                Edit
                            </button>
                        </div>
                    }
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Participants</h3>
                        <button class="btn btn-outline-secondary w-100 mb-2" @onclick="(() => InviteFriendPage(conversation))">Invite</button>
                        <ul class="list-group">
                            <Virtualize Items="conversation?.Participants" Context="p" OverscanCount="10">
                                @if (chosenUser is null || chosenUser.Id != p.Id)
                                {
                                    <li class="list-group-item bg-secondary text-white mb-2">
                                        <span class="oi oi-person me-1"></span>
                                        <span class="clickable" @onclick="(() => UserDetailsPage(p))">
                                            @p.DisplayName
                                        </span>
                                        @if (loggedInUser.Id != p.Id)
                                        {
                                            <button class="btn btn-primary btn-sm float-end" @onclick="(() => chosenUser = p)">Remove</button>
                                        }
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item mb-2">
                                        <span class="oi oi-person me-1"></span><span class="clickable" @onclick="(() => UserDetailsPage(p))">@p.DisplayName</span>
                                        <div class="btn-group-sm float-end">
                                            <button class="btn btn-success me-1" @onclick="(async() => await RemoveParticipant())">Remove</button>
                                            <button class="btn btn-danger" @onclick="(() => chosenUser = null)">Cancel</button>
                                        </div>
                                    </li>
                                }
                            </Virtualize>       
                        </ul>
                    </div>
                </div>
              </div>
              <div class="row fixed-bottom mb-4 mx-2">
                  <EditForm Model="model" OnValidSubmit="SendMessage">
                      <DataAnnotationsValidator />
                        <div class="col-xl-12 col-lg-12">
                          <div class="row">
                            <ValidationMessage For="(() => model.Text)"/>
                            <div class="col-8">
                                <InputText placeholder="@($"Message {conversation?.GroupName}")" aria-label="Message Box"
                                class="form-control bg-dark text-light input-section" @bind-Value="model.Text" />  
                            </div>
                            <div class="col-2">
                                <InputFile OnChange="LoadFiles" 
                                class="form-control bg-dark text-light input-section"
                                accept=".png,.jpg,.jpeg,.txt,.pdf"/>
                            </div>
                            <div class="col-2">
                                <button type="submit" class="btn btn-outline-secondary form-control" 
                                    disabled="@(IsConnected is false)">
                                    Send
                                </button>
                            </div>
                          </div>
                        </div>
                  </EditForm>
              </div>
            </div>
        }
    }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateMessageModel model = new();
    private HubConnection? hubConnection;

    private string searchText = "";
    private bool isSortedByNew = true;
    private ConversationModel conversation;
    private List<MessageModel> messages;
    private UserModel loggedInUser;
    private MessageModel selectedMessage;
    private BasicUserModel chosenUser;
    private BanModel ban;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile? file;
    private string errorMessage = "";
    private string fileName = "";
    private string fileExtension = "";

    protected override async Task OnInitializedAsync()
    {
        conversation = await conversationData.GetConversationAsync(Id);
        if (conversation is not null)
        {
            messages = await messageData.GetConversationMessagesAsync(conversation);
        }

        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/conversationhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<MessageModel>("ReceiveMessage", OnReceiveMessage);

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinConversation", conversation);
    }

    private void OnReceiveMessage(MessageModel message)
    {
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            if (conversation is not null)
            {
                await FilterMessages();
            }
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterMessages()
    {
        var output = await messageData.GetConversationMessagesAsync(conversation);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(m => m.Text.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(c => c.Timestamp).ToList();
        }
        else
        {
            output = output.OrderBy(c => c.Timestamp).ToList();
        }

        messages = output;
        await SaveFilterState();
    }

    private async Task SendMessage()
    {
        try
        {
            errorMessage = "";

            string relativePath = await CaptureFile();
            string objectId = await codeGenerator.GenerateMessageIdentifierAsync();

            MessageModel m = new()
            {
                ObjectIdentifier = objectId,
                Sender = new BasicUserModel(loggedInUser),
                Text = model.Text,
                FileName = relativePath,
                OriginalFileName = fileName,
                FileExtension = fileExtension,
                Conversation = conversation,
                Archived = false,
            };

            await messageData.CreateMessage(m);

            if (hubConnection is not null)
            {
                await hubConnection.InvokeAsync("SendMessage", m, conversation);
            }

            file = null;
            fileName = string.Empty;
            fileExtension = string.Empty;
            model = new();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private async Task RemoveParticipant()
    {
        conversation.Participants.Remove(chosenUser);
        await conversationData.UpdateConversation(conversation);
        chosenUser = null;
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterMessages();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterMessages();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

    private void InviteFriendPage(ConversationModel conversation)
    {
        navManager.NavigateTo($"/InviteFriend/{conversation.Id}");
    }

    private void UserDetailsPage(BasicUserModel user)
    {
        navManager.NavigateTo($"/userDetails/{user.Id}");
    }

    private void SettingsPage(ConversationModel conversation)
    {
        navManager.NavigateTo($"/UpdateConversation/{conversation.Id}");
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        errorMessage = "";

        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage"), 
                loggedInUser.Email, 
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errorMessage = $"File: {file.Name} Error: {ex.Message}";
            throw;
        }
    }
}
