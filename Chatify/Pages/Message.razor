@page "/messages"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navManager
@inject IUserData userData
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>

<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>
<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

<ul>
    @foreach (var message in messages)
    {
        <li>@message.Text</li>
    }
</ul>


@code {
    private HubConnection hubConnection;
    private List<MessageModel> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/testhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<MessageModel>("ReceiveMessage", (message) =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        var user = await userData.GetUserFromAuthenticationAsync("abc-123");

        var message = new MessageModel
        {
            Sender = new BasicUserModel(user),
            Text = "LALALALALA",
        };

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", message);
        } 
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}