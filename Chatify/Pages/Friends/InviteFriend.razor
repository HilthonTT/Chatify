@page "/InviteFriend/{Id}"
@attribute [Authorize]
@inject IConversationData conversationData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

<h1 class="text-center text-uppercase mb-4 fw-bold">Invite Friends</h1>

@if (loggedInUser is not null && conversation is not null)
{
    @if (conversation.Participants.Any(p => p.Id == loggedInUser.Id) is false)
    {
        <div class="alert alert-danger">
            You are not authorized to view this page.
        </div>
    }
    else
    {
        <div class="row justify-content-center bg-dark p-5">
            <div class="col-xl-12 col-lg-10">
                <div class="row">
                    <div class="col-11">
                        <div class="conversation-info border border-2 p-2 border-white rounded-3">
                            <div class="conversation-title">@conversation.GroupName</div>
                            <div class="conversation-owner">Owner: @conversation.Owner.FullName</div>
                            <div class="conversation-participants">@conversation.Participants.Count Participants</div>
                            <div class="conversation-category">Category: @conversation.Category.CategoryName</div>
                        </div>
                    </div>
                    <div class="col-1 text-center">
                        <button class="btn btn-close btn-close-white" @onclick="ClosePage"></button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-11">
                        <input class="form-control search-input bg-dark text-white" 
                            type="text" placeholder="Search" aria-label="Search Box" 
                            @oninput="((txt) => OnSearchInput((string)txt.Value))"/>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-11">
                        <InputRadioGroup id="friends" @bind-Value="selectedFriendId">
                            @if (friends.Count > 0)
                            {
                                <Virtualize Items="friends" Context="f" OverscanCount="10">
                                    @if (selectedFriend is null || selectedFriend.Id != f.Id)
                                    {
                                        <div class="radio-item-group" @onclick="(() => selectedFriend = f)">
                                            <InputRadio Value="f.Id"/>
                                            <label class="@SelectedUserClass(f)">@f.DisplayName</label>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="radio-item-group">
                                            <div class="friend-info mb-1">
                                                <InputRadio Value="f.Id" />
                                                <label class="@SelectedUserClass(f)">@f.DisplayName</label> 
                                            </div>
                                            <div class="btn-group friend-actions w-100">
                                                <button class="btn btn-success me-1 w-50" @onclick="(async() => await AddParticipant(f))">Add</button>
                                                <button class="btn btn-danger w-50" @onclick="(() => selectedFriend = null)">Cancel</button>
                                            </div>
                                        </div>
                                    }
                                </Virtualize>
                            }
                            else
                            {
                                <div class="no-friends mt-2">
                                    You do not have any friends that isn't already in conversation.
                                </div>
                            }
                        </InputRadioGroup>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }

    private string selectedFriendId = "";

    private UserModel loggedInUser;
    private ConversationModel conversation;
    private List<BasicUserModel> friends;
    private BasicUserModel selectedFriend;

    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        conversation = await conversationData.GetConversationAsync(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (conversation is not null && loggedInUser is not null)
        {
            friends = loggedInUser.Friends.Where(
                u => !conversation.Participants.Any(
                    existingUser => existingUser.Id == u.Id)).ToList();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterFriends();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task FilterFriends()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        var conversation = await conversationData.GetConversationAsync(Id);
        var output = loggedInUser.Friends.Where(
            u => !conversation.Participants.Any(
                existingUser => existingUser.Id == u.Id)).ToList();

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(u => u.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                u.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        friends = output;
        await SaveFilterState();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterFriends();
    }

    private async Task AddParticipant(BasicUserModel model)
    {
        conversation.Participants.Add(model);

        await conversationData.UpdateConversation(conversation, loggedInUser);

        friends.Remove(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private string SelectedUserClass(BasicUserModel user)
    {
        if (selectedFriend is not null)
        {
            if (user.Id == selectedFriend.Id)
            {
                return "selected-item-group";
            }
        }

        return "";
    }
}
