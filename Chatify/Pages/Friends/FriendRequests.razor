@page "/FriendRequests"
@attribute [Authorize]
@inject IFriendRequestData requestData
@inject IUserData userData
@inject IBanData banData
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

@if (ban is null)
{
    <h1 class="page-heading mb-4">Friend Requests</h1>

    <div class="row">
        <div class="col-12 col-md-8 col-xl-9 text-uppercase fw-bold">You currently have @pendingRequests?.Count @GetFriendRequestCount()</div>
        <div class="col-12 col-md-4 col-xl-12 btn-group">
            <button class="btn text-uppercase fw-bold me-2 @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
            <button class="btn text-uppercase fw-bold @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Old</button>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-xl-12">
            <input type="text" placeholder="Search" aria-label="Search Box" 
                class="form-control bg-dark text-light input-section"
                @oninput="(async(txt) => await OnSearchInput((string)txt.Value))">
        </div>
    </div>

    <CascadingValue Value="RequestChanged">
        <div class="row mt-5">
            <div class="col-md-10 col-xl-12">
                @if (pendingRequests is not null)
                {
                    <Virtualize Items="pendingRequests" Context="r" OverscanCount="10">
                        <FriendRequestComponent 
                            FriendRequest="r" 
                            PendingRequests="pendingRequests" 
                            RequestChanged="RequestChanged" 
                            LoggedInUser="loggedInUser"/>
                    </Virtualize>
                }
            </div>
        </div>
    </CascadingValue>
}
else
{
    <Banned />
}


