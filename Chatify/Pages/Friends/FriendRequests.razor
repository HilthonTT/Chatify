@page "/FriendRequests"
@attribute [Authorize]
@inject IFriendRequestData requestData
@inject IUserData userData
@inject IBanData banData
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

@if (ban is null)
{
    <h1 class="page-heading mb-4">Friend Requests</h1>

    <div class="row">
        <div class="col-12 col-md-8 col-xl-9 text-uppercase fw-bold">You currently have @pendingRequests?.Count @GetFriendRequestCount()</div>
        <div class="col-12 col-md-4 col-xl-12 btn-group">
            <button class="btn text-uppercase fw-bold me-2 @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
            <button class="btn text-uppercase fw-bold @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Old</button>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-xl-12">
            <input type="text" placeholder="Search" aria-label="Search Box" 
                class="form-control bg-dark text-light input-section"
                @oninput="(async(txt) => await OnSearchInput((string)txt.Value))">
        </div>
    </div>

    <CascadingValue Value="RequestChanged">
        <div class="row mt-5">
            <div class="col-md-10 col-xl-12">
                @if (pendingRequests is not null)
                {
                    <Virtualize Items="pendingRequests" Context="r" OverscanCount="10">
                        <FriendRequestComponent 
                            FriendRequest="r" 
                            PendingRequests="pendingRequests" 
                            RequestChanged="RequestChanged" 
                            LoggedInUser="loggedInUser"/>
                    </Virtualize>
                }
            </div>
        </div>
    </CascadingValue>
}
else
{
    <Banned />
}

@code {
    [CascadingParameter]
    public EventCallback<FriendRequestModel> RequestChanged { get; set; }

    private UserModel loggedInUser;
    private List<FriendRequestModel> pendingRequests;
    private List<FriendRequestModel> sendedRequests;
    private BanModel ban;
    private string searchText = "";
    private bool isSortedByNew = true;
    
    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            pendingRequests = await requestData.GetUserPendingFriendRequestsAsync(loggedInUser.Id);
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterPendingRequests();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterPendingRequests()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        var output = await requestData.GetUserPendingFriendRequestsAsync(loggedInUser.Id);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(f => f.Receiver.DisplayName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                f.Sender.DisplayName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(f => f.RequestDate).ToList();
        }
        else
        {
            output = output.OrderBy(f => f.RequestDate).ToList();
        }

        pendingRequests = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterPendingRequests();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterPendingRequests();     
    }

    private string GetFriendRequestCount()
    {
        if (pendingRequests?.Count > 1)
        {
            return "Friend Requests";
        }

        return "Friend Request";
    }

    private string SortedByNewClass(bool isNew)
    {
        if (isSortedByNew == isNew)
        {
            return "btn-secondary";
        }

        return "btn-outline-secondary";
    }
}
