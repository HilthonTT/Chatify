@page "/FriendRequests"
@attribute [Authorize]
@inject IFriendRequestData requestData
@inject IUserData userData
@inject IBanData banData
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

@if (ban is null)
{
    <h1 class="page-heading mb-4">Friend Requests</h1>

    <div class="row">
        <div class="col-12 col-md-8 col-xl-9 text-uppercase fw-bold">You currently have @pendingRequests?.Count @GetFriendRequestCount()</div>
        <div class="col-12 col-md-4 col-xl-12 btn-group">
            <button class="btn text-uppercase fw-bold me-2 @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
            <button class="btn text-uppercase fw-bold @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Old</button>
        </div>
        <div class="col-12 col-md-4 col-xl-12 mt-2">
            <button class="btn btn-outline-success text-uppercase fw-bold w-100" 
                @onclick="(() => viewSendedRequests = !viewSendedRequests)">
                @GetPendingRequestButtonText(viewSendedRequests)
            </button>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-xl-12">
            <input type="text" placeholder="Search" aria-label="Search Box" 
                class="form-control bg-dark text-light input-section border-warning"
                @oninput="(async(txt) => await OnSearchInput((string)txt.Value))">
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-md-10 col-xl-12">
            @if (viewSendedRequests is false)
            {
                @if (pendingRequests is not null)
                {
                    <Virtualize Items="pendingRequests" Context="p" OverscanCount="10">
                        <div class="card mt-2">
                            @if (selectedRequest is null || selectedRequest.Id != p.Id)
                            {
                                <div class="card-body bg-dark">
                                    <h5 class="card-title">Request sent by: @p.Sender.DisplayName</h5>
                                    <p class="card-text">Sent at @p.RequestDate UTC</p>
                                    <p class="card-text">Status: @GetStatusText(p)</p>
                                    <button class="btn btn-outline-success w-100" @onclick="(() => selectedRequest = p)">Accept Request</button>
                                </div>
                            }
                            else
                            {
                                <div class="card-body bg-dark">
                                    <h5 class="card-title">Request sent by: @p.Sender.DisplayName</h5>
                                    <p class="card-text">Sent at @p.RequestDate UTC</p>
                                    <p class="card-text">Status: @GetStatusText(p)</p>
                                    <div class="btn-group w-100">
                                        <button class="btn btn-outline-success me-1 w-50" @onclick="(async() => await AcceptRequest(p))">Accept</button>
                                        <button class="btn btn-outline-danger w-50" @onclick="(() => selectedRequest = null)">Reconsider</button>
                                    </div>
                                </div>
                            }
                        </div>
                    </Virtualize>
                }
            }
            else
            {
                <Virtualize Items="sendedRequests" Context="s" OverscanCount="10">
                    <div class="card mt-2">
                        @if (selectedRequest is null || selectedRequest.Id != s.Id)
                        {
                            <div class="card-body bg-dark">
                                <h5 class="card-title">Request sent to: @s.Receiver.DisplayName</h5>
                                <p class="card-text">Sent at @s.RequestDate UTC</p>
                                <p class="card-text">Status: @GetStatusText(s)</p>
                                @if (s.IsAccepted is false)
                                {
                                    <button class="btn btn-outline-danger w-100" @onclick="(() => selectedRequest = s)">Delete Request</button>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="card-body bg-dark">
                                <h5 class="card-title">Request sent to: @s.Receiver.DisplayName</h5>
                                <p class="card-text">Sent at @s.RequestDate UTC</p>
                                <p class="card-text">Status: @GetStatusText(s)</p>
                                <div class="btn-group w-100">
                                    <button class="btn btn-outline-success me-1 w-50" @onclick="(async() => await DeleteRequest(s))">Delete</button>
                                    <button class="btn btn-outline-danger w-50" @onclick="(() => selectedRequest = null)">Cancel</button>
                                </div>
                            </div>
                        }
                    </div>
                </Virtualize>
            }
        </div>
    </div>
}
else
{
    <Banned />
}

@code {
    private UserModel loggedInUser;
    private List<FriendRequestModel> pendingRequests;
    private List<FriendRequestModel> sendedRequests;
    private FriendRequestModel selectedRequest;
    private BanModel ban;
    private string searchText = "";
    private bool isSortedByNew = true;
    private bool viewSendedRequests = false;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            pendingRequests = await requestData.GetUserPendingFriendRequestsAsync(loggedInUser.Id);
            sendedRequests = await requestData.GetUserSendedFriendRequestsAsync(loggedInUser.Id);
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterPendingRequests();
            await FilterSendedRequests();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
        boolResults = await sessionStorage.GetAsync<bool>(nameof(viewSendedRequests));
        viewSendedRequests = boolResults.Success ? boolResults.Value : false;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
        await sessionStorage.SetAsync(nameof(viewSendedRequests), viewSendedRequests);
    }

    private async Task FilterPendingRequests()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        var output = await requestData.GetUserPendingFriendRequestsAsync(loggedInUser.Id);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(f => f.Receiver.DisplayName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                f.Sender.DisplayName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(f => f.RequestDate).ToList();
        }
        else
        {
            output = output.OrderBy(f => f.RequestDate).ToList();
        }

        pendingRequests = output;
        await SaveFilterState();
    }

    private async Task FilterSendedRequests()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        var output = await requestData.GetUserSendedFriendRequestsAsync(loggedInUser.Id);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(f => f.Receiver.DisplayName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                f.Sender.DisplayName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(f => f.RequestDate).ToList();
        }
        else
        {
            output = output.OrderBy(f => f.RequestDate).ToList();
        }

        sendedRequests = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;

        if (viewSendedRequests is false)
        {
            await FilterPendingRequests();
        }
        else
        {
            await FilterSendedRequests();
        }
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;

        if (viewSendedRequests is false)
        {
            await FilterPendingRequests();
        }
        else
        {
            await FilterSendedRequests();
        }
    }

    private async Task AcceptRequest(FriendRequestModel request)
    {
        var sender = await userData.GetUserAsync(request.Sender.Id);

        request.IsAccepted = true;
        loggedInUser.Friends.Add(request.Sender);
        sender.Friends.Add(new BasicUserModel(loggedInUser));

        await requestData.UpdateFriendRequest(request);
        await userData.UpdateUser(loggedInUser);
        await userData.UpdateUser(sender);

        pendingRequests.Remove(request);
        selectedRequest = null;
    }

    private async Task DeleteRequest(FriendRequestModel request)
    {
        await requestData.DeleteFriendRequestAsync(request);
        sendedRequests.Remove(request);
        selectedRequest = null;
    }

    private string GetFriendRequestCount()
    {
        if (pendingRequests?.Count > 1)
        {
            return "Friend Requests";
        }

        return "Friend Request";
    }

    private string SortedByNewClass(bool isNew)
    {
        if (isSortedByNew == isNew)
        {
            return "btn-outline-primary";
        }

        return "btn-outline-danger";
    }

    private string GetStatusText(FriendRequestModel request)
    {
        if (request.IsAccepted)
        {
            return "Accepted";
        }

        return "Not Considered";
    }

    private string GetPendingRequestButtonText(bool isViewSendedRequests)
    {
        if (isViewSendedRequests is false)
        {
            return "View Pending Requests";
        }

        return "View Received Requests";
    }
}
