@page "/SendFriendRequest"
@attribute [Authorize]
@using Chatify.Models
@inject IUserData userData
@inject IFriendRequestData requestData
@inject IBanData banData
@inject IOidGenerator oidGenerator
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

@if (ban is null)
{
    <h1 class="page-heading mb-4">Send A Friend Request</h1>

    <div class="row justify-content-center">
      <div class="col-xl-10 col-lg-8 col-md-10 card bg-dark border-white p-4">
        <div class="row">
            <div class="close-button-section">
                <button class="btn btn-close btn-close-white" @onclick="ClosePage" />
            </div>
            <div class="col-12">
                <EditForm Model="request" OnValidSubmit="(async() => await SendRequest())">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                      <label class="form-label fw-bold text-uppercase" for="friend-code">Friend Code</label>
                      <div class="mb-1">Insert the friend code of the person you want to add.</div>
                      <ValidationMessage For="(() => request.FriendCode)" />
                        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
                        {
                            <div class="@GetErrorMessageClass() mb-2">@errorMessage</div>
                        }
                      <InputText class="form-control bg-dark text-light input-section" id="friend-code" @bind-Value="request.FriendCode"/>
                    </div>
                    <div class="text-center mt-4">
                      <button type="submit" class="btn btn-secondary btn-lg text-uppercase">Send Request</button>
                    </div>
                </EditForm>
            </div>
        </div>
      </div>
    </div>
}
else
{
    <Banned />
}

@code {
    private CreateFriendRequestModel request = new();
    private List<FriendRequestModel> friendRequests;
    private UserModel loggedInUser;
    private BanModel ban;
    private string errorMessage = "";
    private bool isSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            friendRequests = await requestData.GetUserSendedFriendRequestsAsync(loggedInUser.Id);
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
    }

    private async Task SendRequest()
    {
        isSuccess = false;
        errorMessage = "";
        var user = await userData.GetUserFriendCodeAsync(request.FriendCode);
        var friendRequest = friendRequests.Where(f => f.Receiver.Id == user.Id).FirstOrDefault();
        string objectId = await oidGenerator.GenerateOidAsync();

        if (user is null)
        {
            errorMessage = "Oops... no user have been founded having this friend code.";
            return;
        }

        if (loggedInUser.Id == user.Id)
        {
            errorMessage = "You can't send a friend request to yourself.";
            return;
        }

        if (loggedInUser.Friends.Contains(new BasicUserModel(user)))
        {
            errorMessage = "You already have this person in your friend list.";
            return;
        }

        if (friendRequest is not null)
        {
            errorMessage = "You already have sended a friend request to this person.";
            return;
        }

        FriendRequestModel r = new()
        {
            ObjectIdentifier = objectId,
            Sender = new BasicUserModel(loggedInUser),
            Receiver = new BasicUserModel(user),
        };

        await requestData.CreateFriendRequest(r);
        friendRequests.Add(r);
        request = new();
        errorMessage = "The friend request have been sended";
        isSuccess = true;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private string GetErrorMessageClass()
    {
        if (isSuccess)
        {
            return "text-success";
        }

        return "text-danger";
    }
}
