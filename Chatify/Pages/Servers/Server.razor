@page "/Server/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@inject IUserData userData
@inject IServerData serverData
@inject IChannelData channelData
@inject IMessageData messageData
@inject IBanData banData
@inject IRoleData roleData
@inject IConfiguration config
@inject ICodeGenerator codeGenerator
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@if (ban is null)
{
    <h1 class="page-heading">@selectedChannel?.ChannelName</h1>

    <p class="text-uppercase text-center">@selectedChannel?.ChannelDescription</p>

    @if (loggedInUser is not null && selectedChannel is not null)
    {
        @if (IsUserAuthorized() == false)
        {
            <NotAuthorized />
        }
        else
        {
            <div class="container-fluid vh-100 d-flex flex-column">
              <div class="row flex-grow-1">
                  <div class="col-md-4 col-xl-2">
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Channels</h3>
                        <ul class="list-group">
                            <Virtualize Items="channels" Context="c" OverscanCount="10">
                                <li class="list-group-item @GetChannelClass(c) bg-secondary text-white mb-2 clickable" 
                                    @onclick="(async() => await LoadSelectedChannel(c))">
                                    <span class="clickable">
                                        <span class="oi oi-chat mx-1"></span>
                                        <span>@c.ChannelName</span>
                                    </span>
                                </li>
                            </Virtualize>
                        </ul>
                    </div>
                </div>
                <div class="col-md-8 col-xl-8 messages-container">
                  @if (messages is not null)
                  {
                    <Virtualize Items="messages" Context="m" OverscanCount="10">
                      <MessageComponent @key="m.Id" Message="m" LoggedInUser="loggedInUser"/>
                    </Virtualize>
                    <div class="messages-mb" />
                  }
                </div>
                <div class="col-md-4 col-xl-2">
                    @if (UserHasPermission())
                    {
                        <div class="bg-dark p-2 mb-4 settings-box">
                            <h3>Settings</h3>
                            <button class="btn btn-outline-secondary w-100 mb-2" @onclick="(() => SettingsPage(server))">
                                Edit
                            </button>
                        </div>
                    }
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Members</h3>
                        <button class="btn btn-outline-secondary w-100 mb-2" @onclick="(() => InviteFriendPage(server))">Invite</button>
                        <ul class="list-group">
                            <Virtualize Items="server?.Members" Context="m" OverscanCount="10">
                                <li class="list-group-item bg-secondary text-white mb-2">
                                    <span class="oi oi-person me-1"></span>
                                    <span class="clickable @GetMemberClass(m)" @onclick="(() => UserDetailsPage(m))">
                                        @m.DisplayName - @GetUserRole(m)
                                    </span>
                                </li>
                            </Virtualize>
                        </ul>
                    </div>
                </div>
              </div>
              @if (IsUserAllowedToChat(selectedChannel))
              {
                <div class="row fixed-bottom mb-4 mx-2">
                  <EditForm Model="model" OnValidSubmit="SendMessage">
                      <ValidationSummary />
                      <div class="col-xl-12 col-lg-12">
                        <div class="row">
                          <ValidationMessage For="(() => model.Text)"/>
                          <div class="col-8">
                            <InputTextArea placeholder="@($"Message {selectedChannel?.ChannelName}")" aria-label="Message Box"
                              class="form-control bg-dark text-light input-section" @bind-Value="model.Text" />  
                          </div>
                          <div class="col-2">
                            <InputFile OnChange="LoadFiles" 
                              class="form-control bg-dark text-light input-section"
                              accept=".png,.jpg,.jpeg,.txt,.pdf"/>
                          </div>
                          <div class="col-2">
                            <button type="submit" class="btn btn-outline-secondary form-control" 
                              disabled="@(IsConnected is false)">
                              Send
                          </button>
                          </div>
                        </div>
                      </div>
                  </EditForm>
                </div>
              }
            </div>
        }
    }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateMessageModel model = new();
    private HubConnection? hubConnection;

    private bool isSortedByNew = true;
    private ServerModel server;
    private ChannelModel selectedChannel;
    private List<MessageModel> messages;
    private List<ChannelModel> channels;
    private List<RoleModel> roles;
    private UserModel loggedInUser;
    private RoleModel role;
    private BanModel ban;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile file;
    private string errorMessage = "";
    private string fileName = "";
    private string fileExtension = "";

    protected override async Task OnInitializedAsync()
    {
        server = await serverData.GetServerAsync(Id);
        if (server is not null)
        {
            channels = await channelData.GetAllChannelsServerAsync(server);
            selectedChannel = channels.FirstOrDefault();
            messages = await messageData.GetChannelMessagesAsync(selectedChannel);
            roles = await roleData.GetAllRolesServerAsync(server);
        }

        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
            if (server is not null) 
                role = await roleData.GetUserServerRoleAsync(loggedInUser, server);
        }

        if (selectedChannel is not null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/channelhub"))
            .WithAutomaticReconnect()
            .Build();

            hubConnection.On<MessageModel>("ReceiveMessage", OnReceiveMessage);

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinConversation", selectedChannel);
        }
    }

    private void OnReceiveMessage(MessageModel message)
    {
        file = null;
        fileName = "";
        fileExtension = "";
        model = new();
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "messageModal");
    }

    private async Task LoadSelectedChannel(ChannelModel channel)
    {
        if (hubConnection is not null)
        {
            await DisposeHubConnection();
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/channelhub"))
            .WithAutomaticReconnect()
            .Build();

        selectedChannel = channel;
        messages = await messageData.GetChannelMessagesAsync(selectedChannel);
        hubConnection.On<MessageModel>("ReceiveMessage", OnReceiveMessage);

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinConversation", selectedChannel);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            if (server is not null)
            {
                await FilterMessages();
            }
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterMessages()
    {
        var output = await messageData.GetServerMessagesAsync(server);;

        if (isSortedByNew)
        {
            output = output.OrderByDescending(c => c.Timestamp).ToList();
        }
        else
        {
            output = output.OrderBy(c => c.Timestamp).ToList();
        }

        messages = output;
        await SaveFilterState();
    }

    private async Task SendMessage()
    {
        try
        {
            errorMessage = "";

            string relativePath = await CaptureFile();

            string objectIdentifier = await codeGenerator.GenerateMessageIdentifierAsync();

            MessageModel m = new()
            {
                ObjectIdentifier = objectIdentifier,
                Sender = new BasicUserModel(loggedInUser),
                Text = model.Text,
                FileName = relativePath,
                OriginalFileName = fileName,
                FileExtension = fileExtension,
                Channel = selectedChannel,
                Server = server,
                Archived = false,
            };

            if (hubConnection is not null)
            {
                await hubConnection.InvokeAsync("SendMessage", m, selectedChannel);
            }

            await messageData.CreateMessage(m);

            var newMessage = await messageData.GetMessageObjectIdentifierAsync(m);
            selectedChannel.Messages.Add(newMessage);

            await channelData.UpdateChannel(selectedChannel);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private string GetUserRole(BasicUserModel user)
    {
        if (user.Id == server?.Owner.Id)
        {
            return "Owner";
        }

        var role = roles?.FirstOrDefault(r => r.Users.Any(u => u.Id == user.Id));
        return role?.RoleName;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void SettingsPage(ServerModel conversation)
    {
        navManager.NavigateTo($"/ServerSettings/{conversation.Id}");
    }

    private void UserDetailsPage(BasicUserModel user)
    {
        if (user.Id == loggedInUser.Id)
        {
            navManager.NavigateTo($"/profile");
            return;
        }

        navManager.NavigateTo($"/userDetails/{user.Id}");
    }

    private void InviteFriendPage(ServerModel server)
    {
        navManager.NavigateTo($"/InviteFriend/Server/{server.Id}");
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        errorMessage = "";

        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage"), 
                loggedInUser.Email, 
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errorMessage = $"File: {file.Name} Error: {ex.Message}";
            throw;
        }
    }

    private string GetChannelClass(ChannelModel channel)
    {
        if (channel.Id == selectedChannel.Id)
        {
            return "bg-secondary";
        }

        return "bg-dark";
    }

    private string GetMemberClass(BasicUserModel user)
    {
        if (user.Id == server?.Owner.Id)
        {
            return "text-warning";
        }

        return "";
    }

    private bool IsUserAuthorized()
    {
        if (server is not null && loggedInUser is not null)
        {
            bool IsUserInServer = server.Members.Any(m => m.Id == loggedInUser.Id);
            bool IsUserInBannedList = server.BannedUsers.Any(b => b.Id == loggedInUser.Id);

            if (IsUserInBannedList)
            {
                return false;
            }

            if (IsUserInServer || server.Owner.Id == loggedInUser.Id)
            {
                return true;
            }
        }

        return false;
    }

    private bool IsUserBanned(BasicUserModel user)
    {
        if (server is not null)
        {
            bool IsUserInBannedList = server.BannedUsers.Any(b => b.Id == user.Id);

            if (IsUserInBannedList)
            {
                return true;
            }

            return false;
        }

        return false;
    }

    private bool UserHasPermission()
    {
        if (loggedInUser is null)
        {
            // If no user is logged in, they do not have permission to access the server
            return false;
        }

        // Check if the logged-in user is the owner of the server
        if (loggedInUser.Id == server.Owner.Id)
        {
            // If so, the user has permission to access the server
            return true;
        }

        // If the logged-in user is not the owner, check if they have a role with the necessary permissions
        if (role is not null)
        { 
            // Check if the user has any of the following role-based permissions: ban member, kick member, create channel, create role, give role, view audit log, or edit server
            if (role.CanBanMember || 
                role.CanKickMember || 
                role.CanCreateChannel || 
                role.CanCreateRole || 
                role.CanGiveRole || 
                role.CanViewAuditLog || 
                role.CanEditServer)
            {
                // If so, the user has permission to access the server
                return true;
            }
        }

        // If the user does not have any of the necessary permissions, they do not have permission to access the server
        return false;
    }

    private bool IsUserAllowedToChat(ChannelModel channel)
    {
        if (loggedInUser is null || server is null || selectedChannel is null)
        {
            return false;
        }

        if (loggedInUser.Id == server.Owner.Id)
        {
            return true;
        }

        // Checks if the user's role is in the allowed roles of the channel
        if (selectedChannel.AllowedRoles.Where(r => r.Id == role.Id).FirstOrDefault() is not null)
        {
            return true;
        }

        return false;
    }

    private async Task DisposeHubConnection()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        await DisposeHubConnection();
    }
}
