@page "/Server/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@inject IUserData userData
@inject IServerData serverData
@inject IChannelData channelData
@inject IMessageData messageData
@inject IBanData banData
@inject IConfiguration config
@inject ICodeGenerator codeGenerator
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@implements IAsyncDisposable

@if (ban is null)
{
    <h1 class="text-uppercase fw-bold text-center">@selectedChannel?.ChannelName</h1>

    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <div class="row justify-content-center">
            <div class="col-lg-10 col-md-8">
                <div class="row alert bg-warning text-black" role="alert">
                    <div class="col-11">
                        <h4 class="alert-heading">Error!</h4>
                        <p>@errorMessage</p>
                        <hr>
                        <p class="mb-0">You can wait to send another message later if you think this is a mistake.</p>
                    </div>
                    <div class="col-1">
                        <div class="close-button-section">
                            <button class="btn btn-close btn-close" @onclick="(() => errorMessage = string.Empty)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (loggedInUser is not null && selectedChannel is not null)
    {
        @if (IsUserAuthorized() == false)
        {
            <NotAuthorized />
        }
        else
        {
            <div class="container-fluid vh-100 d-flex flex-column">
              <div class="row flex-grow-1">
                  <div class="col-md-4 col-xl-2">
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Channels</h3>
                        <ul class="list-group">
                            <Virtualize Items="channels" Context="c" OverscanCount="10">
                                <div class="mb-2" @onclick="(async() => await LoadSelectedChannel(c))">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <span class="oi oi-chat mx-1"></span>
                                            <span class="clickable @GetChannelClass(c)">@c.ChannelName</span>
                                        </div>
                                        <div>
                                            @if (selectedChannelToModify is null || selectedChannelToModify.Id != c.Id)
                                            {
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="(() => selectedChannelToModify = c)">
                                                    Edit
                                                </button>
                                            }
                                            else
                                            {
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-outline-success">
                                                        Delete
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger">
                                                        Cancel
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </Virtualize>
                        </ul>
                    </div>
                </div>
                <div class="col-md-8 col-xl-8 messages-container">
                  @if (messages is not null)
                  {
                    <Virtualize Items="messages" Context="m" OverscanCount="10">
                      @if (chosenMessage is null || chosenMessage.Id != m.Id)
                      {
                            <div class="message @((chosenMessage is not null && chosenMessage.Id == m.Id) ? "editing text-dark" : "bg-dark") @((m.Sender.Id == loggedInUser?.Id) ? "self" : "")">
                                <div class="message-sender">@m.Sender.DisplayName</div>
                                <div class="message-text text-break">@m.Text</div>
                                @if (string.IsNullOrWhiteSpace(m.FileName) is false)
                                {
                                    @if (m.FileExtension == ".png" || m.FileExtension == ".jpg" || m.FileExtension == ".jpeg")
                                    {
                                        <div class="text-center">
                                            <img class="img-fluid w-25 h-25" src="@CreateWebPath(m.FileName)" alt="@m.OriginalFileName" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="message-text">
                                            <a class="link-warning" href="@CreateWebPath(m.FileName)" download="@m.OriginalFileName">
                                                @m.OriginalFileName
                                            </a>
                                        </div>
                                    }
                                }
                                <div class="message-timestamp mb-1">Sent at: @m.Timestamp.ToString("dd-MM-yyyy HH:mm") UTC</div>
                                @if (m.Timestamp.ToString("dd-MM-yyyy HH:mm") != m.LastEdited.ToString("dd-MM-yyyy HH:mm"))
                                {
                                  <div class="message-timestamp mb-1">Edited on: @m.LastEdited.ToString("dd-MM-yyyy HH:mm") UTC</div>
                                }
                                @if (m.Sender.Id == loggedInUser?.Id)
                                {
                                  <div class="btn-group">
                                    <button class="btn btn-outline-danger" @onclick="(() => OnMessageClick(m))">Edit</button>
                                  </div>
                                }
                          </div>
                      }
                      else
                      {
                           <div class="message @((chosenMessage is not null && chosenMessage.Id == m.Id) ? "editing text-dark" : "bg-dark") @((m.Sender.Id == loggedInUser?.Id) ? "self" : "")">
                                <div class="message-sender">@m.Sender.DisplayName</div>
                                <InputText @bind-Value="@editingMessageText" class="message-text">@m.Text</InputText>
                                @if (string.IsNullOrWhiteSpace(m.FileName) is false)
                                {
                                    @if (m.FileExtension == ".png" || m.FileExtension == ".jpg" || m.FileExtension == ".jpeg")
                                    {
                                        <div class="text-center">
                                            <img class="img-fluid w-25 h-25" src="@CreateWebPath(m.FileName)" alt="@m.OriginalFileName"/>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="message-text">
                                            <a class="link-warning" href="@CreateWebPath(m.FileName)" download="@m.OriginalFileName">
                                                @m.OriginalFileName
                                            </a>
                                        </div>
                                    }
                                }
                                <div class="message-timestamp mb-1">Sent at: @m.Timestamp.ToString("dd-MM-yyyy HH:mm") UTC</div>
                                @if (m.Timestamp.ToString("dd-MM-yyyy HH:mm") != m.LastEdited.ToString("dd-MM-yyyy HH:mm"))
                                {
                                  <div class="message-timestamp mb-1">Edited on: @m.LastEdited.ToString("dd-MM-yyyy HH:mm") UTC</div>
                                }
                                @if (m.Sender.Id == loggedInUser?.Id)
                                {
                                  <div class="btn-group">
                                    <button class="btn btn-success me-1" @onclick="(() => UpdateMessage())">Save</button>
                                    <button class="btn btn-danger" @onclick="(() => ArchiveMessage())">Archive</button>
                                  </div>
                                }
                          </div>
                      }
                    </Virtualize>
                    <div class="messages-mb" />
                  }
                </div>
                <div class="col-md-4 col-xl-2">
                    @if (loggedInUser?.Id == server?.Owner.Id)
                    {
                        <div class="bg-dark p-2 mb-2">
                            <h3>Settings</h3>
                            <button class="btn btn-outline-warning w-100 mb-2" @onclick="(() => SettingsPage(server))">
                                Edit
                            </button>
                        </div>
                    }
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Participants</h3>
                        <button class="btn btn-outline-warning w-100 mb-2" @onclick="(() => InviteFriendPage(server))">Invite</button>
                        <ul class="list-group">
                            <Virtualize Items="server?.Members" Context="p" OverscanCount="10">
                                <li class="list-group-item mb-2">
                                    <span class="oi oi-person me-1"></span>
                                    <span class="clickable" @onclick="(() => UserDetailsPage(p))">
                                        @p.DisplayName - @((IsUserBanned(p)) ? "Banned" : "Not Banned")
                                    </span>
                                </li>
                            </Virtualize>
                        </ul>
                    </div>
                </div>
              </div>
              <div class="row fixed-bottom mb-4 mx-2">
                <EditForm Model="message" OnValidSubmit="SendMessage">
                    <ValidationSummary />
                    <div class="col-xl-12 col-lg-12">
                      <div class="row">
                        <ValidationMessage For="(() => message.Text)"/>
                        <div class="col-8">
                          <InputText placeholder="@($"Message {selectedChannel?.ChannelName}")" aria-label="Message Box"
                            class="form-control bg-dark text-light input-section border-warning" @bind-Value="message.Text" />  
                        </div>
                        <div class="col-2">
                          <InputFile OnChange="LoadFiles" 
                            class="form-control bg-dark text-light input-section border-warning"
                            accept=".png,.jpg,.jpeg,.txt,.pdf"/>
                        </div>
                        <div class="col-2">
                          <button type="submit" class="btn btn-outline-warning form-control" 
                            disabled="@(IsConnected is false)">
                            Send
                        </button>
                        </div>
                      </div>
                    </div>
                </EditForm>
              </div>
            </div>
        }
    }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateMessageModel message = new();
    private HubConnection? hubConnection;

    private string editingMessageText = "";
    private string searchText = "";
    private bool isSortedByNew = true;
    private ServerModel server;
    private ChannelModel selectedChannel;
    private ChannelModel selectedChannelToModify;
    private List<MessageModel> messages;
    private List<ChannelModel> channels;
    private UserModel loggedInUser;
    private MessageModel chosenMessage;
    private BanModel ban;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile file;
    private string errorMessage = "";
    private string fileName = "";
    private string fileExtension = "";

    protected override async Task OnInitializedAsync()
    {
        server = await serverData.GetServerAsync(Id);
        if (server is not null)
        {
            channels = await channelData.GetAllChannelsServerAsync(server);
            selectedChannel = channels.FirstOrDefault();
            messages = await messageData.GetChannelMessagesAsync(selectedChannel);
        }

        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }

        if (selectedChannel is not null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/channelhub"))
            .WithAutomaticReconnect()
            .Build();

            hubConnection.On<MessageModel>("ReceiveMessage", OnReceiveMessage);

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinConversation", selectedChannel);
        }
    }

    private void OnReceiveMessage(MessageModel message)
    {
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadSelectedChannel(ChannelModel channel)
    {
        await DisposeHubConnection();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/channelhub"))
            .WithAutomaticReconnect()
            .Build();

        selectedChannel = channel;
        messages = await messageData.GetChannelMessagesAsync(selectedChannel);
        hubConnection.On<MessageModel>("ReceiveMessage", OnReceiveMessage);
        
        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinConversation", selectedChannel);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            if (server is not null)
            {
                await FilterMessages();
            }
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterMessages()
    {
        var output = await messageData.GetServerMessagesAsync(server);;

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(m => m.Text.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(c => c.Timestamp).ToList();
        }
        else
        {
            output = output.OrderBy(c => c.Timestamp).ToList();
        }

        messages = output;
        await SaveFilterState();
    }

    private async Task SendMessage()
    {
        try
        {
            errorMessage = "";

            string relativePath = await CaptureFile();
            string objectIdentifier = await codeGenerator.GenerateMessageIdentifierAsync();

            MessageModel m = new()
            {
                ObjectIdentifier = objectIdentifier,
                Sender = new BasicUserModel(loggedInUser),
                Text = message.Text,
                FileName = relativePath,
                OriginalFileName = fileName,
                FileExtension = fileExtension,
                Channel = selectedChannel,
                Server = server,
                Archived = false,
            };

            await messageData.CreateMessage(m);

            var newMessage = await messageData.GetMessageObjectIdentifierAsync(m);
            selectedChannel.Messages.Add(newMessage);

            await channelData.UpdateChannel(selectedChannel);

            if (hubConnection is not null)
            {
                await hubConnection.InvokeAsync("SendMessage", m, selectedChannel);
            }

            file = null;
            fileName = string.Empty;
            fileExtension = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task UpdateMessage()
    {
        if (chosenMessage.Text == editingMessageText)
        {
            chosenMessage = null;
            return;
        }

        chosenMessage.Text = editingMessageText;
        chosenMessage.LastEdited = DateTime.UtcNow;
        await messageData.UpdateMessageAsync(chosenMessage);
        chosenMessage = null;
    }

    private async Task ArchiveMessage()
    {
        messages.Remove(chosenMessage);
        chosenMessage.Archived = true;
        await messageData.UpdateMessageAsync(chosenMessage);
        chosenMessage = null;
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterMessages();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterMessages();
    }

    private void OnMessageClick(MessageModel message)
    {
        chosenMessage = message;
        editingMessageText = message.Text;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void SettingsPage(ServerModel conversation)
    {
        navManager.NavigateTo($"/ServerSettings/{conversation.Id}");
    }

    private void UserDetailsPage(BasicUserModel user)
    {
        if (user.Id == loggedInUser.Id)
        {
            navManager.NavigateTo($"/profile");
            return;
        }

        navManager.NavigateTo($"/userDetails/{user.Id}");
    }

    private void InviteFriendPage(ServerModel server)
    {
        navManager.NavigateTo($"/InviteFriend/Server/{server.Id}");
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        errorMessage = "";

        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage"), 
                loggedInUser.Email, 
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errorMessage = $"File: {file.Name} Error: {ex.Message}";
            throw;
        }
    }

    private string GetChannelClass(ChannelModel channel)
    {
        if (channel.Id == selectedChannel.Id)
        {
            return "fw-bold";
        }

        return "";
    }

    private bool IsUserAuthorized()
    {
        if (server is not null && loggedInUser is not null)
        {
            bool IsUserInServer = server.Members.Any(m => m.Id == loggedInUser.Id);
            bool IsUserInBannedList = server.BannedUsers.Any(b => b.Id == loggedInUser.Id);

            if (IsUserInBannedList)
            {
                return false;
            }

            if (IsUserInServer || server.Owner.Id == loggedInUser.Id)
            {
                return true;
            }
        }

        return false;
    }

    private bool IsUserBanned(BasicUserModel user)
    {
        if (server is not null)
        {
            bool IsUserInBannedList = server.BannedUsers.Any(b => b.Id == user.Id);

            if (IsUserInBannedList)
            {
                return true;
            }

            return false;
        }

        return false;
    }

    private async Task DisposeHubConnection()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        await DisposeHubConnection();
    }
}
