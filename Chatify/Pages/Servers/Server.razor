@page "/Server/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@inject IUserData userData
@inject IServerData serverData
@inject IChannelData channelData
@inject IChannelCategoryData channelCategoryData
@inject IMessageData messageData
@inject IBanData banData
@inject IRoleData roleData
@inject IConfiguration config
@inject OidGenerator oidGenerator
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<ModalComponent Id="invitationModal" Title="Select the server which you want to invite people.">
    <ChildContent>
        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
        {
            <div class="text-danger">@errorMessage</div>
        }
        <input type="text" placeholder="Search"
        aria-label="Search Box" class="form-control bg-dark text-light input-section mb-3"
        @oninput="(async(txt) => await OnSearchInput((string)txt.Value))"/>
            <div class="center-children mb-3">
            <button class="btn btn-secondary btn-lg text-uppercase"
                @onclick="SendInvite">
                Send Invite
            </button>
        </div>
        @if (servers?.Count > 0)
        {
            <Virtualize Items="servers" Context="s" OverscanCount="10">
                <div class="card bg-dark clickable @GetServerClass(s) mb-4" 
                    @onclick="(() => selectedServer = s)">
                    <div class="row g-0">
                        <div class="col-md-1">
                            <div class="p-1">
                                @if (string.IsNullOrWhiteSpace(s.PictureName) is false)
                                {
                                    <div class="text-center p-3">
                                        <img src="@CreateWebPath(s.PictureName)" 
                                            class="card-img-top rounded-circle clickable" 
                                            alt="@s.OriginalPictureName"
                                            style="width: 100px; height: 100px;">
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center p-3">
                                        <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                            class="card-img-top rounded-circle clickable" 
                                            alt="Placeholder Image"
                                            style="width: 100px; height: 100px;">
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-11 ">
                            <div class="card-body">
                                <h5 class="card-title text-end">@s.ServerName</h5>
                                <p class="card-text text-end">
                                    @s.ServerDescription
                                </p>
                                <p class="card-text text-end">
                                    Date Created: @s.DateCreated.ToString("dd/MM/yyyy")
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
        else
        {
            <div class="center-children">
                <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </ChildContent>
</ModalComponent>

@if (ban is null)
{
    <h1 class="page-heading text-break mb-1">@server?.ServerName</h1>
    <h3 class="page-heading">@selectedChannel?.ChannelName</h3>

    <p class="text-uppercase text-center">@selectedChannel?.ChannelDescription</p>

    @if (loggedInUser is not null && selectedChannel is not null)
    {
        @if (IsUserAuthorized() == false)
        {
            <NotAuthorized />
        }
        else
        {
            <div class="container-fluid vh-100 d-flex flex-column">
              <div class="row flex-grow-1">
                  <div class="col-md-4 col-xl-2">
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Channels</h3>
                        <hr />
                        <ul class="list-group">
                            @if (channelCategories is not null)
                            {
                                <Virtualize Items="channelCategories" Context="cc" OverscanCount="10">              
                                    <span class="h3">@cc.CategoryName</span>
                                    <Virtualize Items="cc.Channels" Context="c" OverscanCount="10">
                                        <li class="list-group-item @GetChannelClass(c) mb-2 clickable">
                                            <span class="clickable ">
                                                <div class="clickable text-white"
                                                    @onclick="(() => LoadSelectedChannel(c))">
                                                    <span class="oi oi-chat mx-1"></span>
                                                    <span class="h5">@c.ChannelName</span>
                                                </div>
                                            </span>
                                        </li>
                                    </Virtualize>
                                </Virtualize>
                            }
                        </ul>
                    </div>
                </div>
                <div class="col-md-8 col-xl-8 messages-container">
                  <span class="text-uppercase">@GetNonReadMessagesCount()</span>
                  <CascadingValue Value="RequestChanged">
                      @if (messages is not null)
                      {
                        <Virtualize Items="messages" Context="m" OverscanCount="10">
                          <MessageComponent @key="m.Id" 
                                NonReadMessages="nonReadMessages" 
                                Message="m" 
                                Messages="messages"
                                RequestChanged="RequestChanged"
                                LoggedInUser="loggedInUser"/>
                        </Virtualize>
                        <div class="messages-mb" />
                      }
                  </CascadingValue>
                </div>
                <div class="col-md-4 col-xl-2">
                    @if (UserHasPermission())
                    {
                        <div class="bg-dark p-2 mb-4 settings-box">
                            <h3>Settings</h3>
                            <button class="btn btn-outline-secondary w-100 mb-2" @onclick="(() => SettingsPage(server))">
                                Edit
                            </button>
                        </div>
                    }
                    <div class="participants-list p-2">
                        <h3 class="fw-bold text-uppercase">Members</h3>
                        <button class="btn btn-outline-secondary w-100 mb-2" @onclick="(() => InviteFriendPage(server))">Invite</button>
                        <ul class="list-group">
                            <Virtualize Items="server?.Members" Context="m" OverscanCount="10">
                                <li class="list-group-item bg-secondary text-white mb-2">
                                    <span class="oi oi-person me-1"></span>
                                    <span class="clickable @GetMemberClass(m)" @onclick="(() => UserDetailsPage(m))">
                                        @m.DisplayName - @GetUserRole(m)
                                    </span>
                                </li>
                            </Virtualize>
                        </ul>
                    </div>
                </div>
              </div>
              @if (IsUserAllowedToChat(selectedChannel))
              {
                <div class="row fixed-bottom mb-4 mx-2">
                  <EditForm Model="model" OnValidSubmit="SendMessage">
                      <DataAnnotationsValidator />
                      <ValidationMessage For="(() => model.Text)"/>
                      <div class="col-xl-12 col-lg-12">
                        <div class="row">
                            <div class="col-2"></div>
                            <div class="col-1 message-input-controls">                      
                                <button type="button" 
                                    class="btn btn-outline-secondary form-control"
                                    data-toggle="modal"
                                    data-target="#invitationModal">
                                    Send Server Invite
                                </button>
                            </div>
                          <div class="col-6">
                            <InputTextArea placeholder="@($"Message {selectedChannel?.ChannelName}")" aria-label="Message Box"
                              class="form-control bg-dark text-light input-section" @bind-Value="model.Text" />  
                          </div>
                          <div class="col-2 message-input-controls">
                            <InputFile OnChange="LoadFiles" 
                              class="form-control bg-dark text-light input-section"
                              accept=".png,.jpg,.jpeg,.txt,.pdf"/>
                          </div>
                          <div class="col-1 message-input-controls">
                            <button type="submit" class="btn btn-outline-secondary form-control" 
                              disabled="@(IsConnected is false)">
                              Send
                          </button>
                          </div>
                        </div>
                      </div>
                  </EditForm>
                </div>
              }
            </div>
        }
    }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    [CascadingParameter]
    public EventCallback<MessageModel> RequestChanged { get; set; }

    private CreateMessageModel model = new();
    private HubConnection? hubConnection;

    private string searchText = "";
    private bool isSortedByNew = true;
    private ServerModel server;
    private ServerModel selectedServer;
    private ChannelModel selectedChannel;
    private List<MessageModel> messages;
    private List<MessageModel> nonReadMessages;
    private List<ChannelCategoryModel> channelCategories;
    private List<ChannelModel> channels;
    private List<RoleModel> roles;
    private List<ServerModel> servers;
    private UserModel loggedInUser;
    private RoleModel role;
    private BanModel ban;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile file;
    private string errorMessage = "";
    private string fileName = "";
    private string fileExtension = "";

    protected override async Task OnInitializedAsync()
    {
        server = await serverData.GetServerAsync(Id);
        if (server is not null)
        {
            channels = await channelData.GetAllChannelsServerAsync(server);
            selectedChannel = channels.FirstOrDefault();
            messages = await messageData.GetChannelMessagesAsync(selectedChannel);
            roles = await roleData.GetAllRolesServerAsync(server);
            channelCategories = await channelCategoryData.GetServerCategoriesAsync(server);
        }

        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
            servers = await serverData.GetUserServersAsync(loggedInUser.Id);
            if (server is not null) role = await roleData.GetUserServerRoleAsync(loggedInUser, server);
        }

        LoadNonReadMessages();

        if (selectedChannel is not null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/channelhub"))
            .WithAutomaticReconnect()
            .Build();

            hubConnection.On<MessageModel>("ReceiveMessage", OnReceiveMessage);

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinConversation", selectedChannel);
        }
    }

    private void OnReceiveMessage(MessageModel message)
    {
        file = null;
        fileName = "";
        fileExtension = "";
        model = new();
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "messageModal");
    }

    private async Task LoadSelectedChannel(ChannelModel channel)
    {
        if (hubConnection is not null)
        {
            await DisposeHubConnection();
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/channelhub"))
            .WithAutomaticReconnect()
            .Build();

        selectedChannel = channel;
        messages = await messageData.GetChannelMessagesAsync(selectedChannel);

        LoadNonReadMessages();

        hubConnection.On<MessageModel>("ReceiveMessage", OnReceiveMessage);

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinConversation", selectedChannel);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            if (loggedInUser is not null)
            {
                await FilterServers();
            }
            StateHasChanged();
        }
    }

    private void LoadNonReadMessages()
    {
        if (loggedInUser is not null && messages is not null)
        {
            nonReadMessages = messages.Where(m => 
               (!m.ReadBy.Any(u => u.Id == loggedInUser.Id)) 
               && m.Sender.Id != loggedInUser?.Id).ToList();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task FilterServers()
    {
        var output = await serverData.GetUserServersAsync(loggedInUser.Id);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(
                s => s.ServerName.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ServerDescription.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderBy(s => s.DateCreated).ToList();
        }

        servers = output;
        await SaveFilterState();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterServers();
    }

    private async Task SendMessage()
    {
        try
        {
            errorMessage = "";

            string relativePath = await CaptureFile();

            string objectIdentifier = await oidGenerator.GenerateOidAsync();

            MessageModel m = new()
            {
                ObjectIdentifier = objectIdentifier,
                Sender = new BasicUserModel(loggedInUser),
                Text = model.Text,
                FileName = relativePath,
                OriginalFileName = fileName,
                FileExtension = fileExtension,
                Channel = selectedChannel,
                Server = server,
                Archived = false,
            };
            m.ReadBy.Add(new BasicUserModel(loggedInUser));

            if (hubConnection is not null)
            {
                await hubConnection.InvokeAsync("SendMessage", m, selectedChannel);
            }

            await messageData.CreateMessage(m);

            var newMessage = await messageData.GetMessageObjectIdentifierAsync(m);
            selectedChannel.Messages.Add(newMessage);

            await channelData.UpdateChannel(selectedChannel);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task SendInvite()
    {
        errorMessage = "";

        if (selectedServer is null)
        {
            errorMessage = "You must select a server.";
            return;
        }

        string objectId = await oidGenerator.GenerateOidAsync();

        MessageModel m = new()
        {
            ObjectIdentifier = objectId,
            Sender = new BasicUserModel(loggedInUser),
            Text = $"I've just invited you in {selectedServer.ServerName}",
            ServerInvitation = selectedServer,
            Channel = selectedChannel,
            Server = server,
            Archived = false,
        };

        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("SendMessage", m, selectedChannel);
        }

        await messageData.CreateMessage(m);

        var newMessage = await messageData.GetMessageObjectIdentifierAsync(m);
        selectedChannel.Messages.Add(newMessage);
        await channelData.UpdateChannel(selectedChannel);
    }

    private string GetUserRole(BasicUserModel user)
    {
        if (user.Id == server?.Owner.Id)
        {
            return "Owner";
        }

        var role = roles?.FirstOrDefault(r => r.Users.Any(u => u.Id == user.Id));
        return role?.RoleName;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void SettingsPage(ServerModel conversation)
    {
        navManager.NavigateTo($"/ServerSettings/{conversation.Id}");
    }

    private void UserDetailsPage(BasicUserModel user)
    {
        if (user.Id == loggedInUser.Id)
        {
            navManager.NavigateTo($"/profile");
            return;
        }

        navManager.NavigateTo($"/userDetails/{user.Id}");
    }

    private void InviteFriendPage(ServerModel server)
    {
        navManager.NavigateTo($"/InviteFriend/Server/{server.Id}");
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        errorMessage = "";

        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage"), 
                loggedInUser.Email, 
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errorMessage = $"File: {file.Name} Error: {ex.Message}";
            throw;
        }
    }

    private string GetChannelClass(ChannelModel channel)
    {
        if (channel.Id == selectedChannel.Id)
        {
            return "bg-secondary";
        }

        return "bg-dark";
    }

    private string GetMemberClass(BasicUserModel user)
    {
        if (user.Id == server?.Owner.Id)
        {
            return "text-warning";
        }

        return "";
    }

    private string GetServerClass(ServerModel server)
    {
        if (selectedServer?.Id == server.Id)
        {
            return "in-allowed-roles";
        }

        return "in-disallowed-roles";
    }

    private string GetNonReadMessagesCount()
    {
        if (nonReadMessages?.Count == 0)
        {
            return "";
        }
        if (nonReadMessages?.Count == 1)
        {
            return "1 unread message";
        }
        if (nonReadMessages?.Count > 99)
        {
            return "99+ unread messages";
        }
        if (nonReadMessages?.Count < 99)
        {
            return $"{nonReadMessages.Count} unread messages";
        }

        return "";
    }

    private bool IsUserAuthorized()
    {
        if (server is not null && loggedInUser is not null)
        {
            bool IsUserInServer = server.Members.Any(m => m.Id == loggedInUser.Id);
            bool IsUserInBannedList = server.BannedUsers.Any(b => b.Id == loggedInUser.Id);

            if (IsUserInBannedList)
            {
                return false;
            }

            if (IsUserInServer || server.Owner.Id == loggedInUser.Id)
            {
                return true;
            }
        }

        return false;
    }

    private bool IsUserBanned(BasicUserModel user)
    {
        if (server is not null)
        {
            bool IsUserInBannedList = server.BannedUsers.Any(b => b.Id == user.Id);

            if (IsUserInBannedList)
            {
                return true;
            }

            return false;
        }

        return false;
    }

    private bool UserHasPermission()
    {
        if (loggedInUser is null)
        {
            // If no user is logged in, they do not have permission to access the server
            return false;
        }

        // Check if the logged-in user is the owner of the server
        if (loggedInUser.Id == server.Owner.Id)
        {
            // If so, the user has permission to access the server
            return true;
        }

        // If the logged-in user is not the owner, check if they have a role with the necessary permissions
        if (role is not null)
        { 
            // Check if the user has any of the following role-based permissions: ban member, kick member, create channel, create role, give role, view audit log, or edit server
            if (role.CanBanMember || 
                role.CanKickMember || 
                role.CanCreateChannel || 
                role.CanCreateRole || 
                role.CanGiveRole || 
                role.CanViewAuditLog || 
                role.CanEditServer)
            {
                // If so, the user has permission to access the server
                return true;
            }
        }

        // If the user does not have any of the necessary permissions, they do not have permission to access the server
        return false;
    }

    private bool IsUserAllowedToChat(ChannelModel channel)
    {
        if (loggedInUser is null || server is null || selectedChannel is null)
        {
            return false;
        }

        if (loggedInUser.Id == server.Owner.Id)
        {
            return true;
        }

        // Checks if the user's role is in the allowed roles of the channel
        if (selectedChannel.AllowedRoles.Where(r => r.Id == role.Id).FirstOrDefault() is not null)
        {
            return true;
        }

        return false;
    }

    private async Task DisposeHubConnection()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        await DisposeHubConnection();
    }
}
