@page "/ServerSettings/{Id}"
@using Microsoft.JSInterop
@attribute [Authorize]
@inject IServerData serverData
@inject IUserData userData
@inject ICategoryData categoryData
@inject IBanData banData
@inject IConfiguration config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject ProtectedSessionStorage sessionStorage

@if (ban is null)
{
  <h1 class="text-uppercase text-center fw-bold mb-4">@server?.ServerName Settings</h1>

  @if (loggedInUser?.Id != server?.Owner.Id)
  {
    <NotAuthorized />
  }
  else
  {
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
        <div class="modal-content bg-dark text-white"> 
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">
                    @GetModalTitleString()
                </h5>
                <button type="button" class="btn-close btn-close-white text-white" data-dismiss="modal" aria-label="Close" />
                </div>
                <div class="modal-body">
                    Are you sure you want to commit these actions?
                </div>
                <div class="modal-footer">
                <button type="button" 
                    class="btn btn-secondary" 
                    data-dismiss="modal" 
                    @onclick="ClearSelectedUsers">
                    Close
                </button>
                @if (selectedUserToBan is not null)
                {
                    <button type="button" 
                        class="btn btn-primary" 
                        data-dismiss="modal" 
                        @onclick="(async() => await BanMember(selectedUserToBan))">
                        Ban Member
                    </button> 
                }
                else if (selectedUserToKick is not null)
                {
                    <button type="button" 
                        class="btn btn-primary" 
                        data-dismiss="modal" 
                        @onclick="(async() => await BanMember(selectedUserToKick))">
                        Kick Member
                    </button>
                }
                else
                {
                    <button type="button" 
                        class="btn btn-primary" 
                        data-dismiss="modal" 
                        @onclick="(async() => await UnbanMember(selectedUserToUnban))">
                        Unban Member
                    </button>
                }
                </div>
            </div>
        </div>
    </div>
      @if (server is not null)
      {
        <div class="rounded rounded-3">
          <div class="card-body">
            <div class="row justify-content-center">
              <div class="col-lg-10 col-md-8 bg-dark p-4">
                <div class="row">
                  <div class="col-11">
                    <div class="btn-group center-children mb-4">
                      <button class="btn me-1 @GetOpenDetailsPageClass(true)" 
                          @onclick="(async() => await ShowDetailsClick(true))">
                          Show Server Details
                      </button>
                      <button class="btn me-1 @GetMembersPageClass(true)" 
                          @onclick="(async() => await ShowMembersPage(true))">
                          Show Members
                      </button>
                      <button class="btn @GetCreatePageClass(true)"
                          @onclick="(async() => await ShowCreatePage(true))">
                          Create Channel
                      </button>
                    </div>
                    @if (showServerDetailsPage)
                    {
                      <div>
                          @if (currentEditingFileName == server.Id)
                          {
                            <label class="form-label text-danger">@serverNameErrorMessage</label>
                            <EditForm class="conversation-edit-form" Model="editedFileName"
                                OnSubmit="(async() => await SavePicture())">
                                <div class="col-12">
                                  <div class="row">
                                    <div class="col-12">
                                      <div class="center-children mb-2">
                                        @if (string.IsNullOrWhiteSpace(server.PictureName) is false)
                                        {
                                          <img src="@CreateWebPath(server.PictureName)" 
                                              class="img-fluid rounded-circle w-25 h-25"/>
                                        }
                                        else
                                        {
                                          <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                              class="img-fluid rounded-circle w-25 h-25" alt="Placeholder Image"/>
                                        }
                                      </div>
                                    </div>
                                  </div>
                                    <div class="row">
                                      <div class="col-11">
                                        <InputFile OnChange="LoadFiles" 
                                            class="form-control bg-dark text-light conversation-edit-field border-warning w-100"/>     
                                      </div>
                                      <div class="col-1">
                                        <div class="btn-group">
                                          <button class="btn btn-outline-success me-1" type="submit">
                                              Save
                                          </button>
                                          <button class="btn btn-outline-danger" type="button" @onclick="CancelClick">
                                              Cancel
                                          </button>
                                        </div>
                                      </div>
                                    </div>
                                </div>                                     
                            </EditForm>
                          }
                          else
                          {
                            <div class="center-children mb-2">
                              @if (string.IsNullOrWhiteSpace(server.PictureName) is false)
                              {
                                <img src="@CreateWebPath(server.PictureName)" 
                                    class="img-fluid rounded-circle w-25 h-25"/>
                              }
                              else
                              {
                                <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                    class="img-fluid rounded-circle w-25 h-25" alt="Placeholder Image"/>
                              }
                            </div>
                            <button class="btn btn-outline-warning w-100" @onclick="(() => EditPicture())">
                              Edit Picture
                            </button>
                          }
                          <hr />
                          @if (currentEditingServerName == server.Id)
                          {
                            <label class="form-label text-danger">@serverNameErrorMessage</label>
                            <EditForm class="conversation-edit-form" Model="editedServerName"
                              OnSubmit="(async() => await SaveServerName())">
                              <InputText class="form-control bg-dark text-light conversation-edit-field border-warning"
                                  @bind-Value="editedServerName"/>
                              <div class="btn-group">
                                <button class="btn btn-outline-success mx-1" type="submit">
                                    Save
                                </button>
                                <button class="btn btn-outline-danger" type="button"
                                    @onclick="(CancelClick)">
                                    Cancel
                                </button>
                              </div>
                            </EditForm>
                          }
                          else
                          {
                            <h2>@server?.ServerName</h2>
                            <button class="btn btn-outline-warning w-100" @onclick="(() => EditServerName())">
                                Edit Server Name
                            </button>
                          }
                          <hr />
                          @if (currentEditingCategoryId == server.Id)
                          {
                            <EditForm class="conversation-edit-form" Model="editedCategoryId" 
                                OnSubmit="(async() => await SaveCategory())">                      
                                <InputRadioGroup id="category" @bind-Value="editedCategoryId">
                                    <Virtualize Items="categories" Context="c" OverscanCount="10">
                                        <div class="radio-item-group">
                                            <InputRadio Value="c.Id" id="@c.Id"/>
                                            <label for="@c.Id" class="h-100 w-100">
                                                <span class="fw-bold text-uppercase text-center h5">@c.CategoryName</span>
                                                <p>@c.CategoryDescription</p>
                                            </label>
                                        </div>
                                    </Virtualize>
                                </InputRadioGroup>
                                <div class="btn-group">
                                    <button class="btn btn-outline-success me-1" type="submit">
                                        Save
                                    </button>
                                    <button class="btn btn-outline-danger" type="button" 
                                        @onclick="(CancelClick)">
                                        Cancel
                                    </button>
                                </div>
                            </EditForm>
                          }
                          else
                          {
                            <h2>@server.Category.CategoryName</h2>
                            <button class="btn btn-outline-warning w-100" @onclick="(() => EditCategory())">
                                Edit Category
                            </button>
                          }
                          <hr />
                          @if (currentEditingServerDescription == server.Id)
                          {
                              <label class="form-label text-danger">@serverDescriptionErrorMessage</label>
                              <EditForm class="conversation-edit-form" Model="editedServerDescription"
                                OnSubmit="(async() => await SaveServerDescription())">
                                <InputTextArea class="form-control bg-dark text-light conversation-edit-field border-warning"
                                    @bind-Value="editedServerDescription"/>
                                <div class="btn-group">
                                    <button class="btn btn-outline-success mx-1" type="submit">
                                        Save
                                    </button>
                                    <button class="btn btn-outline-danger" type="button"
                                        @onclick="CancelClick">
                                        Cancel
                                    </button>
                                </div>
                              </EditForm>
                          }
                          else
                          {
                            <h2>@server?.ServerDescription</h2>
                            <button class="btn btn-outline-warning w-100" @onclick="(() => EditServerDescription())">
                                Edit Server Description
                            </button>
                          }
                        <hr />
                        <p class="conversation-info">The Owner: @server.Owner.DisplayName</p>
                        <p class="conversation-info">This was created on: @server.DateCreated.ToString("dd/MM/yyyy")</p>
                      </div>
                      }
                      else if (showServerMembersPage && users is not null)
                      {
                        <div class="row">
                          <div class="col-12">
                            <div class="row mb-4 mt-2">
                              <div class="col-12">
                                  <div class="col-md-8 col-xl-12 btn-group">
                                    <button class="btn text-uppercase fw-bold me-2 @SortedByPriorityClass(false)" 
                                        @onclick="(async() => await PriorityBannedUsers(false))">
                                        Priority - Not Banned
                                    </button>
                                    <button class="btn text-uppercase fw-bold @SortedByPriorityClass(true)" 
                                        @onclick="(async() => await PriorityBannedUsers(true))">
                                        Priority - Banned
                                    </button>
                                </div>
                              </div>
                            </div>
                            <div class="row mb-2">
                              <div class="col-12">
                                <input type="text" placeholder="Search" 
                                    aria-label="Search Box" class="form-control bg-dark text-light input-section border-warning"
                                    @oninput="(async(txt) => await OnSearchInput((string)txt.Value))"/>
                              </div>
                            </div>
                            <div class="row">
                              <div class="col-12">
                                <Virtualize Items="users" Context="u" OverscanCount="10">
                                  <div class="user-card unclickable bg-black">
                                    <div class="d-flex justify-content-between">
                                        <div class="">
                                          <div class="user-card__name clickable" @onclick="(() => OpenUserDetails(u))">@u.DisplayName</div>
                                          <div class="user-card__friend-code mt-2">Status: @((server.BannedUsers.Any(b => b.Id == u.Id)) ? "Banned" : "Not Banned")</div>
                                          <div class="user-card__friend-code">Friend Code: @u.FriendCode</div>
                                          <div class="user-card__date">Joined on the @u.DateCreated.ToString("dd/MM/yyyy")</div>
                                        </div>
                                        @if (u.Id != loggedInUser.Id)
                                        {
                                            <div class="btn-group" role="group">
                                                <button id="btn-group-settings" type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <p><i class="fas fa-cog clickable"></i></p>
                                                </button>
                                                <div class="dropdown-menu dropdown-menu-dark" aria-labelledby="btn-group-settings">
                                                    @if (IsUserBanned(u) is false)
                                                    {
                                                        <button class="dropdown-item text-success" data-toggle="modal" data-target="#exampleModalCenter" 
                                                            @onclick="(() => selectedUserToKick = u)">
                                                            Kick Member
                                                        </button>
                                                        <button class="dropdown-item text-danger" data-toggle="modal" data-target="#exampleModalCenter" 
                                                            @onclick="(() => selectedUserToBan = u)">
                                                            Ban Member
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="dropdown-item text-success" data-toggle="modal" data-target="#exampleModalCenter" 
                                                            @onclick="(() => selectedUserToUnban = u)">
                                                            Unban Member
                                                        </button>
                                                    }
                                                </div>
                                            </div>       
                                        }
                                    </div>                          
                                  </div>
                                </Virtualize>
                              </div>
                            </div>
                          </div>
                        </div>
                      }
                      else if (showCreateChannelPage)
                      {
                        <div>
                            <div></div>
                        </div>
                      }
                  </div>
                  <div class="col-1">
                    <div class="close-button-section">
                        <button class="btn btn-close btn-close-white" @onclick="ClosePage"/>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      }
  }
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CreateServerModel model = new();
    private ServerModel server;
    private ServerModel editingModel;
    private List<CategoryModel> categories;
    private List<UserModel> users;
    private UserModel loggedInUser;
    private BanModel ban;

    private UserModel selectedUserToKick;
    private UserModel selectedUserToBan;
    private UserModel selectedUserToUnban;

    private string currentEditingServerName = "";
    private string editedServerName = "";
    private string currentEditingServerDescription = "";
    private string editedServerDescription = "";
    private string currentEditingCategoryId = "";
    private string editedCategoryId = "";
    private string currentEditingFileName = "";
    private string editedFileName = "";

    private string searchText = "";
    private bool showServerDetailsPage = true;
    private bool showServerMembersPage = false;
    private bool showCreateChannelPage = false;
    private bool priorityBannedUsers = false;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile? file;
    private string errorMessage = "";
    private string fileName = "";
    private string fileExtension = "";

    private string serverNameErrorMessage = "";
    private string serverDescriptionErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategoriesAsync();
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        server = await serverData.GetServerAsync(Id);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
        if (server is not null)
        {
            users = await userData.GetAllUsersServerAsync(server);
            model.ServerName = server.ServerName;
            model.ServerDescription = server.ServerDescription;
            model.PictureName = server.PictureName;
            model.CategoryId = categories?.Where(c => c.Id == server.Category.Id).FirstOrDefault().Id;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            if (server is not null)
            {
                await FilterUsers();
            }
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(showServerDetailsPage));
        showServerDetailsPage = boolResults.Success ? boolResults.Value : true;
        boolResults = await sessionStorage.GetAsync<bool>(nameof(showServerMembersPage));
        showServerMembersPage = boolResults.Success ? boolResults.Value : false;
        boolResults = await sessionStorage.GetAsync<bool>(nameof(showCreateChannelPage));
        showCreateChannelPage = boolResults.Success ? boolResults.Value : false;
        boolResults = await sessionStorage.GetAsync<bool>(nameof(priorityBannedUsers));
        priorityBannedUsers = boolResults.Success ? boolResults.Value : false;
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(showServerDetailsPage), showServerDetailsPage);
        await sessionStorage.SetAsync(nameof(showServerMembersPage), showServerMembersPage);
        await sessionStorage.SetAsync(nameof(showCreateChannelPage), showCreateChannelPage);
        await sessionStorage.SetAsync(nameof(priorityBannedUsers), priorityBannedUsers);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task FilterUsers()
    {
        var output = await userData.GetAllUsersServerAsync(server);
        var bannedUsersId = server.BannedUsers.Select(b => b.Id).ToList();

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(u => u.DisplayName.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (priorityBannedUsers)
        {
            output = output.OrderByDescending(u => IsUserBanned(u)).ToList();
        }
        else
        {
            output = output.OrderByDescending(
                u => u.DateCreated).ThenByDescending(
                u => !IsUserBanned(u)).ToList();
        }


        users = output;
        await SaveFilterState();
    }

    private async Task PriorityBannedUsers(bool isPriority)
    {
        priorityBannedUsers = isPriority;
        await FilterUsers();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterUsers();
    }

    private void CancelClick()
    {
        errorMessage = string.Empty;
        serverNameErrorMessage = string.Empty;
        serverDescriptionErrorMessage = string.Empty;
        currentEditingServerName = string.Empty;
        currentEditingServerDescription = string.Empty;
        currentEditingCategoryId = string.Empty;
        currentEditingFileName = string.Empty;
    }

    private async Task ShowDetailsClick(bool isShowing)
    {
        showServerDetailsPage = isShowing;
        showServerMembersPage = false;
        showCreateChannelPage = false;
        await SaveFilterState();
    }

    private async Task ShowMembersPage(bool isShowing)
    {
        showServerMembersPage = isShowing;
        showServerDetailsPage = false;
        showCreateChannelPage = false;
        await SaveFilterState();
    }

    private async Task ShowCreatePage(bool isShowing)
    {
        showCreateChannelPage = isShowing;
        showServerMembersPage = false;
        showServerDetailsPage = false;
        await SaveFilterState();
    }

    private void EditServerName()
    {
        CancelClick();
        editingModel = server;
        editedServerName = server.ServerName;
        currentEditingServerName = server.Id;
        currentEditingServerDescription = "";
        currentEditingCategoryId = "";
        currentEditingFileName = "";
    }

    private async Task SaveServerName()
    {
        serverNameErrorMessage = "";

        if (editedServerName.Length > 50)
        {
            serverNameErrorMessage = "Server name is too long.";
            return;
        }

        currentEditingServerName = string.Empty;
        server.ServerName = editedServerName;
        await serverData.UpdateServer(server);
    }

    private void EditServerDescription()
    {
        CancelClick();
        editingModel = server;
        editedServerDescription = server.ServerDescription;
        currentEditingServerName = "";
        currentEditingServerDescription = server.Id;
        currentEditingCategoryId = "";
        currentEditingFileName = "";
    }

    private async Task SaveServerDescription()
    {
        serverDescriptionErrorMessage = "";

        if (editedServerDescription.Length > 100)
        {
            serverDescriptionErrorMessage = "Description is too long.";
            return;
        }

        currentEditingServerDescription = string.Empty;
        server.ServerDescription = editedServerDescription;
        await serverData.UpdateServer(server);
    }

    private void EditCategory()
    {
        CancelClick();
        editingModel = server;
        editedCategoryId = server.Category.Id;
        currentEditingServerName = "";
        currentEditingServerDescription = "";
        currentEditingCategoryId = server.Id;
        currentEditingFileName = "";
    }

    private async Task SaveCategory()
    {
        currentEditingCategoryId = string.Empty;
        server.Category = categories.Where(c => c.Id == editedCategoryId).FirstOrDefault();
        await serverData.UpdateServer(server);
    }

    private void EditPicture()
    {
        CancelClick();
        editingModel = server;
        currentEditingServerName = "";
        currentEditingServerDescription = "";
        currentEditingCategoryId = "";
        currentEditingFileName = server.Id;
    }

    private async Task SavePicture()
    {
        string relativePath = await CaptureFile();

        server.PictureName = relativePath;
        server.OriginalPictureName = fileName;
        server.PictureExtension = fileExtension;

        await serverData.UpdateServer(server);
        currentEditingFileName = string.Empty;
        file = null;
    }

    private void ClearSelectedUsers()
    {
        selectedUserToBan = null;
        selectedUserToKick = null;
        selectedUserToUnban = null;
    }

    private async Task KickMember(UserModel user)
    {
        var userToRemove = server.Members.Where(u => u.Id == user.Id).FirstOrDefault();
        server.Members.Remove(userToRemove);

        await serverData.UpdateServer(server);
        ClearSelectedUsers();
    }

    private async Task BanMember(UserModel user)
    {
        var userToBan = server.Members.Where(u => u.Id == user.Id).FirstOrDefault();
        server.BannedUsers.Add(userToBan);

        await serverData.UpdateServer(server);
        ClearSelectedUsers();
    }

    private async Task UnbanMember(UserModel user)
    {
        var userToUnban = server.BannedUsers.Where(u => u.Id == user.Id).FirstOrDefault();
        server.BannedUsers.Remove(userToUnban);

        await serverData.UpdateServer(server);
        ClearSelectedUsers();
    }

    private void ClosePage()
    {
        navManager.NavigateTo($"/Server/{server.Id}");
    }

    private void OpenUserDetails(UserModel user)
    {
        navManager.NavigateTo($"/userDetails/{user.Id}");
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        errorMessage = "";

        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage"), 
                loggedInUser.Email, 
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errorMessage = $"File: {file.Name} Error: {ex.Message}";
            throw;
        }
    }

    private string SortedByPriorityClass(bool isPriority)
    {
        if (isPriority == priorityBannedUsers)
        {
            return "btn-outline-success";
        }

        return "btn-outline-danger";
    }

    private string GetOpenDetailsPageClass(bool isShowing)
    {
        if (showServerDetailsPage == isShowing)
        {
            return "btn-outline-primary";
        }

        return "btn-outline-danger";
    }

    private string GetMembersPageClass(bool isShowing)
    {
        if (showServerMembersPage == isShowing)
        {
            return "btn-outline-primary";
        }

        return "btn-outline-danger";
    }

    private string GetCreatePageClass(bool isShowing)
    {
        if (showCreateChannelPage == isShowing)
        {
            return "btn-outline-primary";
        }

        return "btn-outline-danger";
    }

    private string GetModalTitleString()
    {
        if (selectedUserToBan is not null)
        {
            return $"Ban {selectedUserToBan.DisplayName}";
        }

        if (selectedUserToKick is not null)
        {
            return $"Kick {selectedUserToKick.DisplayName}";
        }

        return $"Unban {selectedUserToUnban?.DisplayName}";
    }

    private bool IsUserBanned(UserModel user)
    {
        if (server is not null)
        {
            bool IsUserInBannedList = server.BannedUsers.Any(b => b.Id == user.Id);

            if (IsUserInBannedList)
            {
                return true;
            }

            return false;
        }

        return false;
    }
}
