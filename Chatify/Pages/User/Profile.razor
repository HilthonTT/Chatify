@page "/Profile"
@attribute [Authorize]
@inject IConversationData conversationData
@inject IUserData userData
@inject IFriendRequestData requestData
@inject IBanData banData
@inject IConfiguration config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider


<div class="modal fade" id="profileModal" tabindex="-1" role="dialog" aria-labelledby="profileModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="profileModalLongTitle">
                Edit Your Profile Picture
            </h5>
            <button type="button" class="btn-close btn-close-white text-white" data-dismiss="modal" aria-label="Close" />
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="mb-3">
                        <label class="form-label fw-bold text-uppercase" for="profile-picture">Profile Picture</label>
                        <div>Select an image for your conversation. This is not required.</div>
                        <InputFile OnChange="LoadFiles"
                            class="form-control bg-dark text-light input-section"
                            accept=".png,.jpg,.jpeg"/>
                    </div>
                    <div class="center-children">
                        <button class="btn btn-secondary btn-lg text-uppercase mt-4" 
                            type="submit" 
                            data-dismiss="modal" 
                            @onclick="UpdateProfilePicture">
                            Update
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" 
                    class="btn btn-secondary" 
                    data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>


@if (ban is null)
{
    <h1 class="page-heading mb-4">My Profile</h1>

    <div class="rounded rounded-3">
      <div class="card-body">
        <div class="row justify-content-center">
          <div class="col-lg-10 col-md-8 card bg-dark p-4">
            <div class="row">
              <div class="close-button-section">
                  <button class="btn btn-close btn-close-white" @onclick="ClosePage"/>
              </div>
              <div class="col-12">
                <div class="text-center mb-4">
                  <h2>My Account</h2>
                  <div class="mb-3">
                      @if (string.IsNullOrWhiteSpace(loggedInUser?.FileName) is false)
                      {
                        <div class="text-center p-3">
                            <img src="@CreateWebPath(loggedInUser.FileName)" 
                                class="card-img-top rounded-circle" 
                                alt="@loggedInUser.FileName"
                                style="width: 300px; height: 300px;">
                        </div>
                      }
                      else
                      {
                        <div class="text-center p-3">
                            <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                class="card-img-top rounded-circle" 
                                alt="Placeholder Image"
                                style="width: 300px; height: 300px;">
                        </div>
                      }
                      <button class="btn btn-secondary" data-toggle="modal" data-target="#profileModal">
                          Edit Profile Picture
                      </button>
                  </div>
                  <div class="mb-3">
                      <p class="h4">You are logged as: @loggedInUser?.DisplayName</p>
                      <p class="h5">Your actual name is: @loggedInUser?.FullName</p>
                      <p class="h5">You joined Chatify on @loggedInUser?.DateCreated.ToString("dd/MM/yyyy")</p>
                  </div>
                  <button class="btn btn-secondary w-100" @onclick="EditProfilePage">Edit My Profile</button>
                </div>
                @if (loggedInUser?.Friends.Count > 0)
                {
                    <hr />
                    <Virtualize Items="loggedInUser?.Friends" Context="f" OverscanCount="10">
                        <BasicUserComponent @key="f.Id" User="f" LoggedInUser="loggedInUser"/>
                    </Virtualize>
                    <hr />
                }
                <div class="row">
                    @if (conversations?.Count > 0)
                    {
                        <Virtualize Items="conversations" Context="c" OverscanCount="10">
                            <ConversationComponent @key="c.Id" Conversation="c" LoggedInUser="loggedInUser"/>
                        </Virtualize>
                    }
                </div>
              </div>   
            </div>
          </div>
        </div>
      </div>
    </div>
}
else
{
    <Banned />
}

@code {
    private UserModel loggedInUser;
    private List<ConversationModel> conversations;
    private BanModel ban;

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile? file;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            conversations = await conversationData.GetUserConversationsAsync(loggedInUser.Id);
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private async Task UpdateProfilePicture()
    {
        string relativePath = await CaptureFile();

        loggedInUser.FileName = relativePath;
        await userData.UpdateUser(loggedInUser);
        file = null;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void EditProfilePage()
    {
        navManager.NavigateTo("/MicrosoftIdentity/Account/EditProfile", true);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage"), 
                loggedInUser.Email, 
                newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"), 
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch
        {
            throw;
        }
    }
}
