@page "/Users/{SearchText}"
@page "/Users"
@attribute [Authorize]
@inject IUserData userData
@inject IBanData banData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

@if (ban is null)
{
    <h1 class="text-center text-uppercase fw-bold mb-4">Users</h1>

    <div class="row">
        <div class="col-xl-12 col-lg-10">
            <div class="row">
                <div class="col-11">
                    @if (users?.Count > 0)
                    {
                        <Virtualize Items="users" Context="u" OverscanCount="10">
                            <div @onclick="(() => OpenDetails(u))" class="user-card bg-dark">
                                <div class="user-card__name">@u.DisplayName</div>
                                <div class="user-card__friend-code">Friend Code: @u.FriendCode</div>
                                <div class="user-card__date">Joined on the @u.DateCreated.ToString("dd/MM/yyyy")</div>
                            </div>
                        </Virtualize>
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                              <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-1">
                    <div class="close-button-section">
                        <button class="btn btn-close btn-close-white" @onclick="ClosePage"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string SearchText { get; set; }

    private UserModel loggedInUser;
    private List<UserModel> users;
    private BanModel ban;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
        await FilterUsers();
    }

    private async Task FilterUsers()
    {
        var output = await userData.GetAllUsersAsync();

        if (string.IsNullOrWhiteSpace(SearchText) is false)
        {
            output = output.Where(u => u.FirstName.Contains(SearchText, StringComparison.InvariantCultureIgnoreCase) ||
                u.LastName.Contains(SearchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        users = output;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void OpenDetails(UserModel user)
    {
        if (user.Id == loggedInUser.Id)
        {
            navManager.NavigateTo("/Profile");
        }
        else
        {
            navManager.NavigateTo($"/UserDetails/{user.Id}");
        }
    }
}
