@page "/Users/{SearchText}"
@page "/Users"
@attribute [Authorize]
@inject IUserData userData
@inject IBanData banData
@inject IConfiguration config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject ProtectedSessionStorage sessionStorage

@if (ban is null)
{
    <h1 class="page-heading mb-4">Users</h1>

    <div class="row mb-4">
        <div class="text-uppercase fw-bold">@users?.Count users</div>
        <div class="col-md-12 col-xl-12">
            <input type="text" placeholder="Search"
                aria-label="Search Box" class="form-control bg-dark text-light input-section"
                @oninput="(async(txt) => await OnSearchInput((string)txt.Value))"/>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-12 col-lg-10">
            <div class="row">
                <div class="col-12">
                    @if (users?.Count > 0)
                    {
                        <Virtualize Items="users" Context="u" OverscanCount="10">
                            <UserComponent @key="u.Id" User="u" LoggedInUser="loggedInUser"/>
                        </Virtualize>
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                              <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <Banned />
}

@code {
    [Parameter]
    public string SearchText { get; set; }

    private UserModel loggedInUser;
    private List<UserModel> users;
    private BanModel ban;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FilterUsers();
            StateHasChanged();
        }
    }

    private async Task FilterUsers()
    {
        var output = await userData.GetAllUsersCachedAsync();

        if (string.IsNullOrWhiteSpace(SearchText) is false)
        {
            output = output.Where(u => u.DisplayName.Contains(
                SearchText, StringComparison.InvariantCultureIgnoreCase))
            .ToList();
        }

        users = output;
    }

    private async Task OnSearchInput(string searchInput)
    {
        SearchText = searchInput;
        await FilterUsers();
    }
}
