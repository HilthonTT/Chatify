@page "/userDetails/{Id}"
@attribute [Authorize]
@inject IUserData userData
@inject IConversationData conversationData
@inject IFriendRequestData requestData
@inject IPrivateConversationData privateConversationData
@inject IBanData banData
@inject OidGenerator oidGenerator
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime JSRuntime

<div class="modal fade" id="friendModal" tabindex="-1" role="dialog" aria-labelledby="friendModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="friendModalLongTitle">
                Friend @user?.DisplayName
            </h5>
                <button type="button" 
                    class="btn-close btn-close-white text-white" 
                    data-dismiss="modal" 
                    aria-label="Close" />
            </div>
            <div class="modal-body">
                <div class="row">
                    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
                    {
                        <div class="text-danger">@errorMessage</div>
                    }
                    <div class="mt-1">Are you sure you want to add @user?.DisplayName?</div>
                    <div class="center-children">
                        <button class="btn btn-secondary btn-lg text-uppercase mt-4" @onclick="SendFriendRequest">
                            Send Friend Request
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
            <button type="button" 
                class="btn btn-secondary"
                data-dismiss="modal">
                Close
            </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="unfriendModal" tabindex="-1" role="dialog" aria-labelledby="unfriendModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="unfriendModalLongTitle">
                Friend @user?.DisplayName
            </h5>
                <button type="button" 
                    class="btn-close btn-close-white text-white" 
                    data-dismiss="modal" 
                    aria-label="Close" />
            </div>
            <div class="modal-body">
                <div class="row">
                    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
                    {
                        <div class="text-danger">@errorMessage</div>
                    }
                    <div class="mt-1">Are you sure you want to unfriend @user?.DisplayName?</div>
                    <div class="center-children">
                        <button class="btn btn-secondary btn-lg text-uppercase mt-4" @onclick="UnfriendUser">
                            Unfriend @user?.DisplayName
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
            <button type="button" 
                class="btn btn-secondary"
                data-dismiss="modal">
                Close
            </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="blockModal" tabindex="-1" role="dialog" aria-labelledby="blockModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="blockModalLongTitle">
                @BlockButtonText() @user?.DisplayName
            </h5>
                <button type="button" 
                    class="btn-close btn-close-white text-white" 
                    data-dismiss="modal" 
                    aria-label="Close" />
            </div>
            <div class="modal-body">
                <div class="row">
                    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
                    {
                        <div class="text-danger">@errorMessage</div>
                    }
                    <div class="mt-1">Are you sure you want to @((LoggedInUserHasBlockedUser()) ? "Unblock" : "Block") @user?.DisplayName?</div>
                    <div class="center-children">
                        <button class="btn btn-secondary btn-lg text-uppercase mt-4" @onclick="ToggleBlockUser">
                            @BlockButtonText() @user?.DisplayName
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
            <button type="button" 
                class="btn btn-secondary"
                data-dismiss="modal">
                Close
            </button>
            </div>
        </div>
    </div>
</div>

@if (ban is null)
{
    <h1 class="page-heading mb-4">@user?.DisplayName's Profile</h1>

    <div class="rounded rounded-3 ">
      <div class="card-body">
        <div class="row justify-content-center">
          <div class="col-lg-10 col-md-8 card bg-dark p-4">
            <div class="row">
              <div class="close-button-section">
                  <button class="btn btn-close btn-close-white" @onclick="ClosePage"/>
              </div>
              <div class="col-12">
                <div class="d-flex justify-content-start">
                    <h2>@user?.DisplayName's Account</h2>
                </div>
                <p>This user joined Chatify on @user?.DateCreated.ToString("dd/MM/yyyy")</p>
                @if (loggedInUser?.Id != user?.Id)
                {
                    <div class="d-flex justify-content-between mb-4">
                        <div class="btn-group">
                            <button class="btn btn-secondary me-1" @onclick="(async() => await OpenPrivateConversation(user))">
                                Launch Conversation
                            </button>
                            @if (IsUserFriends() && HasAnyoneBlockedAnyone() is false)
                            {
                                <button class="btn btn-outline-secondary" 
                                        data-toggle="modal" 
                                        data-target="#unfriendModal">
                                    Unfriend
                                </button>
                            }
                            else if (IsUserFriends() is false && HasAnyoneBlockedAnyone() is false)
                            {
                                <button class="btn btn-outline-secondary" 
                                        data-toggle="modal" 
                                        data-target="#friendModal">
                                    Send Friend Request
                                </button>
                            }
                        </div>

                        <AuthorizeView Policy="Admin">
                            <button class="btn btn-outline-danger" @onclick="(() => OpenAdminBan(user))">Ban User</button>
                        </AuthorizeView>
                    </div>
                    <div>
                        @if (LoggedInUserHasBlockedUser() is false)
                        {
                            <button class="btn btn-danger"
                                    data-toggle="modal"
                                    data-target="#blockModal">
                                @BlockButtonText() @user?.DisplayName
                            </button>       
                        }
                    </div>
                }
                @if (user?.Friends.Count > 0)
                {
                    <hr />
                    <div>
                      <h2>@user?.DisplayName's Friends</h2>
                      <Virtualize Items="user?.Friends" Context="f" OverscanCount="10">
                          <BasicUserComponent User="f" LoggedInUser="loggedInUser"/>
                      </Virtualize>
                    </div>
                }
                <div class="row">
                    @if (conversations?.Count > 0)
                    {
                        <hr />
                        <h2 class="card-title mt-4">@user?.DisplayName's Conversations</h2>
                        <Virtualize Items="conversations" Context="c" OverscanCount="10">
                            <ConversationComponent Conversation="c" LoggedInUser="loggedInUser"/>
                        </Virtualize> 
                    }
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
}
else
{
    <Banned />
}

@code {

    [Parameter]
    public string Id { get; set; }

    private UserModel loggedInUser;
    private UserModel user;
    private List<ConversationModel> conversations;
    private BanModel ban;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        user = await userData.GetUserAsync(Id);
        if (loggedInUser is not null)
        {
            conversations = await conversationData.GetUserConversationsAsync(user.Id);
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
    }

    private async Task CloseModal(string id)
    {
        await JSRuntime.InvokeVoidAsync("closeModal", id);
    }

    private async Task OpenPrivateConversation(UserModel user)
    {
        var conversation = await privateConversationData.GetUsersConversationAsync(loggedInUser.Id, user.Id);

        if (conversation is null)
        {
            PrivateConversationModel c = new()
            {
                FirstParticipant = new BasicUserModel(loggedInUser),
                LastParticipant = new BasicUserModel(user),
            };

            await privateConversationData.CreateConversation(c);
            conversation = await privateConversationData.GetUsersConversationAsync(loggedInUser.Id, user.Id);
            navManager.NavigateTo($"/PrivateConversation/{conversation.Id}");
        }
        else
        {
            navManager.NavigateTo($"/PrivateConversation/{conversation.Id}");
        }
    }

    private async Task SendFriendRequest()
    {
        errorMessage = "";

        string objectId = await oidGenerator.GenerateOidAsync();

        if (loggedInUser is null) return;

        var model = await userData.GetUserFriendCodeAsync(user.FriendCode);
        var friendRequest = await requestData.GetAlreadySendedFriendRequestAsync(loggedInUser, user);

        if (loggedInUser.Id == model.Id)
        {
            errorMessage = "You can't send a friend request to yourself.";
            return;
        }

        if (model is null)
        {
            errorMessage = "Oops... no user have been founded having this friend code.";
            return;
        }

        if (friendRequest is not null)
        {
            errorMessage = "You have already sent a friend request or have this person in your friend list.";
            return;
        }

        var newFriendRequest = new FriendRequestModel
        {
            ObjectIdentifier = objectId,
            Sender = new BasicUserModel(loggedInUser),
            Receiver = new BasicUserModel(model),
        };

        await requestData.CreateFriendRequest(newFriendRequest);
        await CloseModal("friendModal");
    }

    private async Task UnfriendUser()
    {
        errorMessage = "";

        if (loggedInUser is null) return;

        var friendRequest = await requestData.GetSenderAndReceiverFriendRequestAsync(loggedInUser, user);

        var friendToRemove = user.Friends.FirstOrDefault(f => f.Id == loggedInUser.Id);
        if (friendToRemove is not null)
        {
            user.Friends.Remove(friendToRemove);
        }

        var loggedInUserFriendToRemove = loggedInUser.Friends.FirstOrDefault(f => f.Id == user.Id);
        if (loggedInUserFriendToRemove is not null)
        {
            loggedInUser.Friends.Remove(loggedInUserFriendToRemove);
        }

        if (friendRequest is not null)
        {
            await requestData.DeleteFriendRequestAsync(friendRequest);
        }

        await userData.UpdateUser(user);
        await userData.UpdateUser(loggedInUser);

        await CloseModal("unfriendModal");
    }

    private async Task ToggleBlockUser()
    {
        var userToBlock = loggedInUser.BlockedUsers.FirstOrDefault(u => u.Id == user.Id);
        if (userToBlock is not null)
        {
            // User is already blocked, so unblock them
            loggedInUser.BlockedUsers.Remove(userToBlock);
            await UnfriendUser();
        }
        else
        {
            // User is not blocked, so block them
            await UnfriendUser();
            loggedInUser.BlockedUsers.Add(new BasicUserModel(user));
        }
        await userData.UpdateUser(loggedInUser);
        await CloseModal("blockModal");
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void OpenAdminBan(UserModel user)
    {
        navManager.NavigateTo($"/AdminBan/{user.Id}");
    }

    private string BlockButtonText()
    {
        var userToBlock = loggedInUser?.BlockedUsers.FirstOrDefault(u => u.Id == user.Id);
        if (userToBlock is not null)
        {
            return "Unblock";
        }

        return "Block";
    }

    private bool IsUserFriends()
    {
        var loggedInUserFriend = loggedInUser.Friends.FirstOrDefault(u => u.Id == user.Id);

        if (loggedInUserFriend is null)
        {
            return false;
        }

        return true;
    }

    private bool UserHasBlockedLoggedInUser()
    {
        var blockedLoggedInUser = user?.BlockedUsers.FirstOrDefault(
            u => u.Id == loggedInUser?.Id);

        if (blockedLoggedInUser is null)
        {
            return false;
        }

        return true;
    }

    private bool LoggedInUserHasBlockedUser()
    {
        var userBlockedInLoggedInUser = loggedInUser?.BlockedUsers.FirstOrDefault(
            u => u.Id == loggedInUser?.Id);

        if (userBlockedInLoggedInUser is null)
        {
            return false;
        }

        return true;
    }

    private bool HasAnyoneBlockedAnyone()
    {
        var userBlockedLoggedInUser = UserHasBlockedLoggedInUser();
        var loggedInUserBlockedUser = LoggedInUserHasBlockedUser();

        return userBlockedLoggedInUser || loggedInUserBlockedUser;
    }
}
