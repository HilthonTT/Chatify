@page "/PrivateConversation/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@inject IPrivateConversationData privateConversationData
@inject IUserData userData
@inject IPrivateMessageData privateMessageData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider
@implements IAsyncDisposable

@if (loggedInUser is not null && conversation is not null)
{
    if (conversation.FirstParticipant.Id != loggedInUser.Id && conversation.LastParticipant.Id != loggedInUser.Id)
    {
        <div class="alert alert-danger">
            You are not authorized to view this page.
        </div>
    }
    else
    {
        <h1 class="text-uppercase fw-bold text-center">@conversation?.GroupName</h1>
        <div class="container-fluid vh-100 d-flex flex-column">
          <div class="row flex-grow-1">
            <div class="col-md-8 col-xl-10 messages-container">
              @if (messages is not null)
              {
                <Virtualize Items="messages" Context="m" OverscanCount="10">
                  @if (chosenMessage is null || chosenMessage.Id != m.Id)
                  {
                        <div class="message @((chosenMessage is not null && chosenMessage.Id == m.Id) ? "editing text-dark" : "bg-dark") @((m.Sender.Id == loggedInUser?.Id) ? "self" : "")">
                            <div class="message-sender">@m.Sender.DisplayName</div>
                            <div class="message-text">@m.Text</div>
                            <div class="message-timestamp">Sent at: @m.Timestamp.ToString("dd-MM-yyyy HH:mm") UTC</div>
                            @if (m.Timestamp.ToString("dd-MM-yyyy HH:mm") != m.LastEdited.ToString("dd-MM-yyyy HH:mm"))
                            {
                              <div class="message-timestamp">Edited on: @m.LastEdited.ToString("dd-MM-yyyy HH:mm") UTC</div>
                            }
                            @if (m.Sender.Id == loggedInUser?.Id)
                            {
                              <div class="btn-group">
                                <button class="btn btn-outline-danger" @onclick="(() => OnMessageClick(m))">Edit</button>
                              </div>
                            }
                      </div>
                  }
                  else
                  {
                       <div class="message @((chosenMessage is not null && chosenMessage.Id == m.Id) ? "editing text-dark" : "bg-dark") @((m.Sender.Id == loggedInUser?.Id) ? "self" : "")">
                            <div class="message-sender">@m.Sender.DisplayName</div>
                            <InputText @bind-Value="@editingMessageText" class="message-text">@m.Text</InputText>
                            <div class="message-timestamp">Sent at: @m.Timestamp.ToString("dd-MM-yyyy HH:mm") UTC</div>
                            @if (m.Timestamp.ToString("dd-MM-yyyy HH:mm") != m.LastEdited.ToString("dd-MM-yyyy HH:mm"))
                            {
                              <div class="message-timestamp">Edited on: @m.LastEdited.ToString("dd-MM-yyyy HH:mm") UTC</div>
                            }
                            @if (m.Sender.Id == loggedInUser?.Id)
                            {
                              <div class="btn-group">
                                <button class="btn btn-success" @onclick="(() => UpdateMessage())">Save</button>
                              </div>
                            }
                      </div>
                  }
                </Virtualize>
              }
            </div>
            <div class="col-md-4 col-xl-2">
                <div class="participants-list p-2">
                    <h3 class="fw-bold text-uppercase">Participants</h3>
                    <ul class="list-group">
                        <li class="list-group-item mb-2 clickable" 
                            @onclick="(() => UserDetailsPage(conversation?.FirstParticipant))">
                            <span class="oi oi-person me-1"></span>
                            @conversation?.FirstParticipant.DisplayName
                        </li>
                        <li class="list-group-item clickable" 
                            @onclick="(() => UserDetailsPage(conversation?.LastParticipant))">
                            <span class="oi oi-person me-1"></span>
                            @conversation?.LastParticipant.DisplayName
                        </li>
                    </ul>
                </div>
            </div>
          </div>
          <div class="row fixed-bottom mb-4 mx-2">
            <div class="col-xl-12 col-lg-12">
              <div class="row">
                <div class="col-10">
                  <input type="text" placeholder="Message @conversation?.GroupName" aria-label="Message Box"
                    class="form-control bg-dark text-light border-warning input-section" @bind-value="messageText" />
                </div>
                <div class="col-2">
                  <button class="btn btn-outline-warning form-control" @onclick="SendMessage" disabled="@(IsConnected is false)">Send</button>
                </div>
              </div>
            </div>
          </div>
        </div>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }

    private HubConnection? hubConnection;

    private string messageText = "";
    private string editingMessageText = "";
    private string searchText = "";
    private bool isSortedByNew = true;
    private PrivateConversationModel conversation;
    private List<PrivateMessageModel> messages = new();
    private UserModel loggedInUser;
    private PrivateMessageModel chosenMessage;

    protected override async Task OnInitializedAsync()
    {
        conversation = await privateConversationData.GetConversationAsync(Id);
        if (conversation is not null)
        {
            messages = await privateMessageData.GetConversationMessagesAsync(conversation);
        }

        loggedInUser = await authProvider.GetUserFromAuth(userData);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/privatechathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<PrivateMessageModel>("ReceiveMessage", OnReceiveMessage);

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinConversation", conversation);
    }

    private void OnReceiveMessage(PrivateMessageModel message)
    {
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterMessages();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(messageText));
        messageText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(messageText), messageText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterMessages()
    {
        var output = new List<PrivateMessageModel>();

        if (conversation is not null)
        {
            await privateMessageData.GetConversationMessagesAsync(conversation);
        }

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(m => m.Text.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(c => c.Timestamp).ToList();
        }
        else
        {
            output = output.OrderBy(c => c.Timestamp).ToList();
        }

        messages = output;
        await SaveFilterState();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageText))
        {
            return;
        }

        PrivateMessageModel message = new()
        {
            Sender = new BasicUserModel(loggedInUser),
            Text = messageText,
            Conversation = conversation,
        };

        await privateMessageData.CreateMessage(message);

        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("SendMessage", message, conversation);
        }

        messageText = "";
    }

    private async Task UpdateMessage()
    {
        chosenMessage.Text = editingMessageText;
        chosenMessage.LastEdited = DateTime.UtcNow;
        await privateMessageData.UpdateMessageAsync(chosenMessage);
        chosenMessage = null;
    }

    private async Task ArchiveMessage()
    {
        chosenMessage.Archived = true;
        await privateMessageData.UpdateMessageAsync(chosenMessage);
        chosenMessage = null;
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterMessages();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterMessages();
    }

    private void OnMessageClick(PrivateMessageModel message)
    {
        chosenMessage = message;
        editingMessageText = message.Text;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; // ? says if not null

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

    private void UserDetailsPage(BasicUserModel user)
    {
        navManager.NavigateTo($"/userDetails/{user.Id}");
    }
}
