@page "/Create"
@attribute [Authorize]
@using Chatify.Models
@inject ICategoryData categoryData
@inject IConversationData conversationData
@inject IUserData userData
@inject IBanData banData
@inject IConfiguration config
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

@if (ban is null)
{
    <h1 class="text-center text-uppercase fw-bold mb-4">Make A Conversation</h1>

    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <div class="row justify-content-center">
            <div class="col-lg-12 col-md-10">
                <div class="row alert bg-warning text-black" role="alert">
                    <div class="close-button-section">
                        <button class="btn btn-close" @onclick="(() => errorMessage = string.Empty)" />
                    </div>
                    <div class="col-12">
                        <h4 class="alert-heading">Error!</h4>
                        <p>@errorMessage</p>
                        <hr />
                        <p class="mb-0">If you think this is a bug, please contact the administrator.</p>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-xl-12 col-lg-10 p-5 bg-dark create-form-layout">
            <EditForm Model="conversation" OnValidSubmit="(async() => await CreateConversation())">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-2">
                        <div class="participants-list p-2">
                            <h3 class="fw-bold text-uppercase">Friends</h3>
                            <label class="form-label">You can add your friends to the conversation by clicking on their name.</label>
                            <input type="text" placeholder="Search"
                                aria-label="Search" class="form-control bg-dark text-white mb-2 input-section border-warning"
                                @oninput="((txt) => OnSearchInput((string)txt.Value))"/>
                            <ul class="list-group">
                                @if (friends is not null)
                                {
                                    <Virtualize Items="friends" Context="f" OverscanCount="10">
                                        @if (selectedFriend is null || selectedFriend.Id != f.Id)
                                        {
                                            <li class="list-group-item mb-2" @onclick="(() => selectedFriend = f)"><span class="oi oi-person me-1"></span>@f.DisplayName</li>
                                        }
                                        else
                                        {
                                            <li class="list-group-item mb-2"><span class="oi oi-person me-1"></span>@f.DisplayName</li>
                                            <div class="btn-group">
                                                <button class="btn btn-success me-2" type="button" @onclick="(() => AddParticipant(f))">Add</button>
                                                <button class="btn btn-danger" type="button" @onclick="(() => selectedFriend = null)">Cancel</button>
                                            </div>
                                        }
                                    </Virtualize>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="col-7">  
                        @if (categories is not null)
                        {  
                            <div class="mb-3">
                                <label class="form-label fw-bold text-uppercase" for="conversation-group-name">Group Name</label>
                                <div class="mt-1">Name your group name. Its name will represent the group name.</div>
                                <ValidationMessage For="(() => conversation.GroupName)" />
                                <InputText class="form-control bg-dark text-white input-section border-warning" id="conversation-group-name" @bind-Value="conversation.GroupName"/>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold text-uppercase" for="conversation-icon">Icon</label>
                                <div class="mt-1">Select an image for your conversation. This is not required.</div>
                                <ValidationMessage For="(() => conversation.PictureName)"/>
                                <InputFile OnChange="LoadFiles"
                                    class="form-control bg-dark text-light input-section border-warning"
                                    accept=".png,.jpg,.jpeg"/>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold text-uppercase" for="category">Category</label>
                                <ValidationMessage For="(() => conversation.CategoryId)" />
                                <div class="mt-1">Choose a category that suits your conversation.</div>
                                <InputRadioGroup id="category" @bind-Value="conversation.CategoryId">
                                    @foreach (var c in categories)
                                    {
                                        <div class="radio-item-group">
                                            <InputRadio Value="@c.Id" id="@c.Id"/>
                                            <label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
                                        </div>
                                    }
                                </InputRadioGroup>
                            </div>
                            <div class="center-children">
                                <button class="btn btn-outline-warning btn-lg text-uppercase mt-4" type="submit">Create Conversation</button>
                            </div>
                        }  
                    </div>
                    <div class="col-2">
                       <div class="participants-list p-2">
                            <h3 class="fw-bold text-uppercase">Participants</h3>
                            <label class="form-label">These are members that will be automatically added.</label>
                            <input type="text" placeholder="Search"
                                aria-label="Search" class="form-control bg-dark text-white mb-2 input-section border-warning"
                                @oninput="((txt) => OnSearchInput((string)txt.Value))"/>
                            <ul class="list-group">
                                <Virtualize Items="conversation.Participants" Context="f" OverscanCount="10">
                                    @if (selectedFriend is null || selectedFriend.Id != f.Id)
                                    {
                                        <li class="list-group-item mb-2" @onclick="(() => selectedFriend = f)">@f.DisplayName</li>
                                    }
                                    else
                                    {
                                        <li class="list-group-item mb-2">@f.DisplayName</li>
                                        <div class="btn-group">
                                            <button class="btn btn-success me-2" type="button" @onclick="(() => RemoveParticipant(f))">Remove</button>
                                            <button class="btn btn-danger" type="button" @onclick="(() => selectedFriend = null)">Cancel</button>
                                        </div>
                                    }
                                </Virtualize>
                            </ul>
                        </div>
                    </div>
                    <div class="col-1">
                        <div class="close-button-section">
                            <button class="btn btn-close btn-close-white" type="button" @onclick="ClosePage" />
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}
else
{
    <Banned />
}

@code {
    private CreateConversationModel conversation = new();
    private List<CategoryModel> categories;
    private List<BasicUserModel> friends;
    private UserModel loggedInUser;
    private BasicUserModel selectedFriend;
    private BanModel ban;
    private string searchText = "";
    private string errorMessage = "";

    private long maxFileSize = 1024 * 1024 * 3; // represents 3MB
    private IBrowserFile? file;
    private string fileName = "";
    private string fileExtension = "";

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategoriesAsync();
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        friends = loggedInUser.Friends;
        if (loggedInUser is not null)
        {
            ban = await banData.GetUserBanActive(loggedInUser.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterFriends();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task FilterFriends()
    {
        var output = new List<BasicUserModel>();

        if (loggedInUser is not null)
        {
            output = loggedInUser.Friends;
        }

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(
                f => f.DisplayName.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        friends = output;
        await SaveFilterState();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void AddParticipant(BasicUserModel participant)
    {
        conversation.Participants.Add(participant);
        loggedInUser.Friends.Remove(participant);
        selectedFriend = null;
    }

    private void RemoveParticipant(BasicUserModel participant)
    {
        conversation.Participants.Remove(participant);
        loggedInUser.Friends.Add(participant);
        selectedFriend = null;
    }

    private async Task CreateConversation()
    {
        try
        {
            errorMessage = "";

            string relativePath = await CaptureFile();

            ConversationModel c = new()
            {
                Owner = new BasicUserModel(loggedInUser),
                Participants = conversation.Participants,
                Category = categories.Where(c => c.Id == conversation.CategoryId).FirstOrDefault(),
                PictureName = relativePath,
                OriginalPictureName = fileName,
                PictureExtension = fileExtension,
                GroupName = conversation.GroupName,
                IsGroupChat = true,
            };

            c.Participants.Add(new BasicUserModel(loggedInUser));

            if (c.Category is null)
            {
                conversation.CategoryId = "";
                return;
            }

            if (c.Participants.Count > 10)
            {
                errorMessage = "You cannot have more than 10 participants in a conversation.\n Try making a server instead.";
                return;
            }

            file = null;
            fileName = string.Empty;
            fileExtension = string.Empty;

            await conversationData.CreateConversation(c);
            conversation = new();
            ClosePage();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterFriends();
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void GetFileExtensionAndFileName()
    {
        fileName = file.Name;
        fileExtension = Path.GetExtension(file.Name);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        GetFileExtensionAndFileName();
    }

    private async Task<string> CaptureFile()
    {
        errorMessage = "";

        if (file is null || loggedInUser is null) return "";

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>("FileStorage"), loggedInUser.Email, newFileName);

            string relativePath = Path.Combine(loggedInUser.Email, newFileName);

            Directory.CreateDirectory(
                Path.Combine(
                    config.GetValue<string>("FileStorage"),
                    loggedInUser.Email));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errorMessage = $"File: {file.Name} Error: {ex.Message}";
            throw;
        }
    }

}
