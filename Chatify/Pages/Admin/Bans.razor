@page "/Bans"
@attribute [Authorize(Policy = "Admin")]
@inject IUserData userData
@inject IBanData banData
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="text-uppercase fw-bold text-center mb-4 text-light">Bans</h1>

<div class="row">
    <div class="text-uppercase fw-bold">@bans?.Count Current Active Ban</div>
    <div class="col-md-8 col-xl-12 btn-group">
        <button class="btn text-uppercase fw-bold me-2 @SortedByNewClass(true)"
            @onclick="(async() => await OrderByNew(true))">
            New
        </button>
        <button class="btn text-uppercase fw-bold @SortedByNewClass(false)"
            @onclick="(async() => await OrderByNew(false))">
            Active
        </button>
    </div>
</div>

<div class="row mt-2">
    <div class="col-md-12 col-xl-12">
        <input type="text" placeholder="Search"
            aria-label="Search Box" class="form-control bg-dark text-light input-section border-warning"
            @oninput="(async(txt) => await OnSearchInput((string)txt.Value))"/>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-10 col-xl-12">
        @if (bans is not null)
        {
            <Virtualize Items="bans" Context="b" OverscanCount="10">
                <div class="user-card bg-dark" @onclick="(() => OpenDetails(b))">
                    <div class="user-card__name">@b.UserBanned.DisplayName - @b.UserBanned.Id</div>
                    <div class="user-card__friend-code">Banned Until: @b.BannedUntil.ToString("dd/MM/yyyy")</div>
                    <div class="user-card__date">Status: @((b.IsActive ? "Active" : "Not Active"))</div>
                </div>
            </Virtualize>
        }
    </div>
</div>

@code {
    private UserModel loggedInUser;
    private List<BanModel> bans;

    private string searchText = "";
    private bool isSortedByNew = true;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        bans = await banData.GetAllBansAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterBans();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterBans()
    {
        var output = await banData.GetAllBansAsync();

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(
                b => b.Reason.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase) ||
                b.UserBanned.DisplayName.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase) ||
                b.UserBanned.Id.Contains(
                    searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(a => a.BannedAt).ToList();
        }
        else
        {
            output = output.OrderByDescending(a => a.IsActive)
                .ThenByDescending(a => a.BannedAt).ToList();
        }

        bans = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterBans();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterBans();
    }

    private void OpenDetails(BanModel ban)
    {
        navManager.NavigateTo($"/BanDetails/{ban.Id}");
    }

    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "btn-outline-primary";
        }

        return "btn-outline-danger";
    }
}
