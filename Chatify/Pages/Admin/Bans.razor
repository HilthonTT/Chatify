@page "/Bans"
@attribute [Authorize(Policy = "Admin")]
@inject IUserData userData
@inject IBanData banData
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading mb-4">Bans</h1>

<div class="row">
    <div class="text-uppercase fw-bold">@bans?.Count Current Active Bans</div>
    <div class="col-md-8 col-xl-12 btn-group">
        <button class="btn text-uppercase fw-bold me-2 @SortedByNewClass(true)"
            @onclick="(async() => await OrderByNew(true))">
            New
        </button>
        <button class="btn text-uppercase fw-bold @SortedByNewClass(false)"
            @onclick="(async() => await OrderByNew(false))">
            Active
        </button>
    </div>
</div>

<div class="row mt-2">
    <div class="col-md-12 col-xl-12">
        <input type="text" placeholder="Search"
            aria-label="Search Box" class="form-control bg-dark text-light input-section"
            @oninput="(async(txt) => await OnBanSearchInput((string)txt.Value))"/>
    </div>
    <div class="col-12 d-block d-md-none">
        @if (users is not null && showUsernames)
        {
            <div class="participants-list p-2">
                <h3 class="fw-bold text-uppercase">Participants</h3>
                <ul class="list-group">
                    <li class="list-group-item @SelectedUsernameClass() text-white mb-2 clickable" 
                        @onclick="(() => OnUsernameClick())">
                        <span class="oi oi-person me-1"></span>
                        All
                    </li>
                    <Virtualize Items="users" Context="u" OverscanCount="10">
                        <li class="list-group-item @SelectedUsernameClass(u.DisplayName) text-white mb-2 clickable" 
                        @onclick="(() => OnUsernameClick(u.DisplayName))">
                            <span class="oi oi-person me-1"></span>
                            @u.DisplayName
                        </li>
                    </Virtualize>
                </ul>
            </div>
        }
        else
        {
            <div class="participants-list p-2">
                <h3 class="fw-bold text-uppercase">Participants</h3>
                <ul class="list-group">
                    @if (users is not null)
                    {
                        <li class="list-group-item @SelectedUsernameClass(selectedUsername) text-white mb-2 clickable" 
                        @onclick="(() => showUsernames = true)">
                            <span class="oi oi-person me-1"></span>
                            @selectedUsername
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-9 col-xl-10">
        @if (bans is not null)
        {
            <Virtualize Items="bans" Context="b" OverscanCount="10">
                 <BanComponent @key="b.Id" Ban="b"/>
            </Virtualize>
        }
    </div>
    <div class="col-md-3 col-xl-2 d-none d-md-block">
        @if (users is not null)
        {
            <div class="participants-list p-2">
                <h3 class="fw-bold text-uppercase">Participants</h3>
                <ul class="list-group">
                    <li class="list-group-item @SelectedUsernameClass() text-white mb-2 clickable" 
                        @onclick="(() => OnUsernameClick())">
                        <span class="oi oi-person me-1"></span>
                        All
                    </li>
                    <Virtualize Items="users" Context="u" OverscanCount="10">
                        <li class="list-group-item @SelectedUsernameClass(u.DisplayName) text-white mb-2 clickable" 
                        @onclick="(() => OnUsernameClick(u.DisplayName))">
                            <span class="oi oi-person me-1"></span>
                            @u.DisplayName
                        </li>
                    </Virtualize>
                </ul>
            </div>
        }
    </div>
</div>

@code {
    private UserModel loggedInUser;
    private List<UserModel> users;
    private List<BanModel> bans;

    private string searchBanText = "";
    private string searchUserText = "";
    private string selectedUsername = "";
    private bool isSortedByNew = true;
    private bool showUsernames = false;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        bans = await banData.GetAllBansAsync();
        users = await userData.GetAllUsersCachedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterBans();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchBanText));
        searchBanText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(searchUserText));
        searchUserText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedUsername));
        selectedUsername = stringResults.Success ? stringResults.Value : "All";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedUsername), selectedUsername);
        await sessionStorage.SetAsync(nameof(searchBanText), searchBanText);
        await sessionStorage.SetAsync(nameof(searchUserText), searchUserText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterBans()
    {
        var output = await banData.GetAllBansAsync();

        if (selectedUsername != "All")
        {
            output = output.Where(b => b.UserBanned?.DisplayName == selectedUsername).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchBanText) is false)
        {
            output = output.Where(
                b => b.Reason.Contains(
                    searchBanText, StringComparison.InvariantCultureIgnoreCase) ||
                b.UserBanned.DisplayName.Contains(
                    searchBanText, StringComparison.InvariantCultureIgnoreCase) ||
                b.UserBanned.Id.Contains(
                    searchBanText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(a => a.BannedAt).ToList();
        }
        else
        {
            output = output.OrderByDescending(a => a.IsActive)
                .ThenByDescending(a => a.BannedAt).ToList();
        }

        bans = output;
        await SaveFilterState();
    }

    private async Task FilterUsers()
    {
        var output = await userData.GetAllUsersCachedAsync();

        if (string.IsNullOrWhiteSpace(searchUserText) is false)
        {
            output = output.Where(u => u.DisplayName.Contains(
                searchUserText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        users = output;
        await SaveFilterState();
    }

    private async Task OnUsernameClick(string username = "All")
    {
        selectedUsername = username;
        showUsernames = false;
        await FilterBans();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterBans();
    }

    private async Task OnBanSearchInput(string searchInput)
    {
        searchBanText = searchInput;
        await FilterBans();
    }

    private async Task OnUserSearchInput(string searchInput)
    {
        searchUserText = searchInput;
        await FilterUsers();
    }

    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "btn-secondary";
        }

        return "btn-outline-secondary";
    }

    private string SelectedUsernameClass(string username = "All")
    {
        if (username == selectedUsername)
        {
            return "bg-secondary";
        }

        return "bg-dark";
    }
}
