@page "/Bans"
@attribute [Authorize(Policy = "Admin")]
@inject IUserData userData
@inject IBanAppealData appealData
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1>Bans</h1>

@code {
    private UserModel loggedInUser;
    private List<BanAppealModel> appeals;
    private List<UserModel> users;
    private string searchText = "";
    private string selectedUsername = "";
    private bool isSortedByNew = true;
    private bool showUsernames = false;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        appeals = await appealData.GetAllBanAppealsAsync();
        users = await userData.GetAllUsersAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterAppeals();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedUsername));
        selectedUsername = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(selectedUsername), selectedUsername);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterAppeals()
    {
        var output = await appealData.GetAllBanAppealsAsync();

        if (selectedUsername != "All")
        {
            output = output.Where(a => a.AppealingUser?.DisplayName == selectedUsername).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(a => a.AppealReason.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(a => a.SubmittedAt).ToList();
        }
        else
        {
            output = output.OrderBy(a => a.SubmittedAt).ToList();
        }

        appeals = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterAppeals();
    }

    private async Task OnUsernameClick(string username = "All")
    {
        selectedUsername = username;
        showUsernames = false;
        await FilterAppeals();
    }

    private void OpenDetails(BanAppealModel appeal)
    {
        navManager.NavigateTo($"/BanAppealDetails/{appeal.Id}");
    }

    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "btn-outline-primary";
        }

        return "btn-outline-danger";
    }

    private string SelectedUsernameClass(string username = "All")
    {
        if (username == selectedUsername)
        {
            return "fw-bold";
        }

        return "";
    }
}
