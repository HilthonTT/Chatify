@page "/BanAppeals"
@attribute [Authorize(Policy = "Admin")]
@inject IUserData userData
@inject IBanAppealData appealData
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading mb-4">Ban Appeals</h1>

<div class="row">
    <div class="text-uppercase fw-bold">@appeals?.Count Ban Appeals</div>
    <div class="col-md-8 col-xl-12 btn-group">
        <button class="btn text-uppercase fw-bold me-2 @SortedByNewClass(true)" 
            @onclick="(async() => await OrderByNew(true))">
            New
        </button>
        <button class="btn text-uppercase fw-bold @SortedByNewClass(false)" 
            @onclick="(async() => await OrderByNew(false))">
            Old
        </button>
    </div>
</div>
<div class="row">
    <div class="mt-2 col-md-8 col-xl-12 btn-group">
        <button class="btn text-uppercase fw-bold w-50 me-2 @FilterByApprovedClass(false)" 
            @onclick="(async() => await FilterByApprovedClick(false))">
            Pending
        </button>
        <button class="btn text-uppercase fw-bold w-50 @FilterByApprovedClass(true)" 
            @onclick="(async() => await FilterByApprovedClick(true))">
            Approved
        </button>
    </div>
</div>

<div class="row mt-2">
    <div class="col-md-12 col-xl-12">
        <input type="text" placeholder="Search"
            aria-label="Search Box" class="form-control bg-dark text-light input-section"
            @oninput="(async(txt) => await OnAppealSearchInput((string)txt.Value))"/>
    </div>
    <div class="col-12 d-block d-md-none">
        @if (users is not null && showUsernames)
        {
            <div class="participants-list p-2">
                <h3 class="fw-bold text-uppercase">Users</h3>
                <input class="form-control bg-dark text-light input-section mb-2"
                        type="text" aria-label="Search User Box" placeholder="Search username"
                        @oninput="((txt) => OnUserSearchInput((string)txt.Value))"/>
                <ul class="list-group">
                    <li class="list-group-item @SelectedUsernameClass() text-white mb-2 clickable" 
                        @onclick="(() => OnUsernameClick())">
                        <span class="oi oi-person me-1"></span>
                        All
                    </li>
                    <Virtualize Items="users" Context="u" OverscanCount="10">
                        <li class="list-group-item @SelectedUsernameClass(u.DisplayName) text-white mb-2 clickable" 
                        @onclick="(() => OnUsernameClick(u.DisplayName))">
                            <span class="oi oi-person me-1"></span>
                            @u.DisplayName
                        </li>
                    </Virtualize>
                </ul>
            </div>
        }
        else
        {
            <div class="participants-list p-2">
                <h3 class="fw-bold text-uppercase">Users</h3>
                <ul class="list-group">
                    @if (users is not null)
                    {
                        <li class="list-group-item @SelectedUsernameClass(selectedUsername) text-white mb-2 clickable" 
                        @onclick="(() => showUsernames = true)">
                            <span class="oi oi-person me-1"></span>
                            @selectedUsername
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-9 col-xl-10">
        @if (appeals is not null)
        {
            <Virtualize Items="appeals" Context="a" OverscanCount="10">
                <DisplayImgComponent @key="a.Id" 
                    ImageSource="@a.AppealingUser.FileName" 
                    IsClickable="true"
                    OpenDetails="(() => OpenDetails(a))">
                    <ChildContent>
                        <h5 class="card-title h4">@a.AppealingUser.DisplayName</h5>
                        <div class="card-text text-danger h4">
                            Status: @((a.IsApproved ? $"Approved" : "Pending"))
                        </div>
                        @if (a.ApprovedAdmin is not null)
                        {
                            <div class="card-text">
                                Disapproved By: @a.ApprovedAdmin.DisplayName on @a.ApprovedAt.ToString("dd/MM/yyyy HH:mm")
                            </div>
                        }
                        @if (a.DisapprovedAdmin is not null)
                        {
                            <div class="card-text">
                                Disapproved By: @a.DisapprovedAdmin.DisplayName on @a.DisapprovedAt.ToString("dd/MM/yyyy HH:mm")
                            </div>
                        }
                        <div class="card-text">
                            Date Created: @a.SubmittedAt.ToString("dd/MM/yyyy")
                        </div>
                    </ChildContent>
                </DisplayImgComponent>
            </Virtualize>
        }
    </div>
    <div class="col-md-3 col-xl-2 d-none d-md-block">
        @if (users is not null)
        {
            <div class="participants-list p-2">
                <h3 class="fw-bold text-uppercase">Users</h3>
                <input class="form-control bg-dark text-light input-section mb-2"
                        type="text" aria-label="Search User Box" placeholder="Search username"
                        @oninput="((txt) => OnUserSearchInput((string)txt.Value))"/>
                <ul class="list-group">
                    <li class="list-group-item @SelectedUsernameClass() text-white mb-2 clickable" 
                        @onclick="(() => OnUsernameClick())">
                        <span class="oi oi-person me-1"></span>
                        All
                    </li>
                    <Virtualize Items="users" Context="u" OverscanCount="10">
                        <li class="list-group-item @SelectedUsernameClass(u.DisplayName) text-white mb-2 clickable" 
                        @onclick="(() => OnUsernameClick(u.DisplayName))">
                            <span class="oi oi-person me-1"></span>
                            @u.DisplayName
                        </li>
                    </Virtualize>
                </ul>
            </div>
        }
    </div>
</div>

@code {
    private UserModel loggedInUser;
    private List<BanAppealModel> appeals;
    private List<UserModel> users;
    private string searchUserText = "";
    private string searchAppealText = "";
    private string selectedUsername = "";
    private bool isSortedByNew = true;
    private bool showUsernames = false;
    private bool filterByApproved = false;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        appeals = await appealData.GetAllBanAppealsAsync();
        users = await userData.GetAllUsersCachedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterAppeals();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchAppealText));
        searchAppealText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedUsername));
        selectedUsername = stringResults.Success ? stringResults.Value : "All";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
        boolResults = await sessionStorage.GetAsync<bool>(nameof(filterByApproved));
        filterByApproved = boolResults.Success ? boolResults.Value : false;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchAppealText), searchAppealText);
        await sessionStorage.SetAsync(nameof(selectedUsername), selectedUsername);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
        await sessionStorage.SetAsync(nameof(filterByApproved), filterByApproved);
    }

    private async Task FilterAppeals()
    {
        var output = await appealData.GetAllBanAppealsAsync();

        if (selectedUsername != "All")
        {
            output = output.Where(a => a.AppealingUser?.DisplayName == selectedUsername).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchAppealText) is false)
        {
            output = output.Where(a => a.AppealReason.Contains(
                searchAppealText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        if (filterByApproved)
        {
            output = output.Where(a => a.IsApproved).ToList();
        }
        else
        {
            output = output.Where(a => a.IsApproved is false).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(a => a.SubmittedAt).ToList();
        }
        else
        {
            output = output.OrderBy(a => a.SubmittedAt).ToList();
        }

        appeals = output;
        await SaveFilterState();
    }

    private async Task FilterUsers()
    {
        var output = await userData.GetAllUsersCachedAsync();

        if (string.IsNullOrWhiteSpace(searchUserText) is false)
        {
            output = output.Where(u => u.DisplayName.Contains(
                searchUserText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        users = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterAppeals();
    }

    private async Task OnAppealSearchInput(string searchInput)
    {
        searchAppealText = searchInput;
        await FilterAppeals();
    }

    private async Task OnUserSearchInput(string searchInput)
    {
        searchUserText = searchInput;
        await FilterUsers();
    }

    private async Task OnUsernameClick(string username = "All")
    {
        selectedUsername = username;
        showUsernames = false;
        await FilterAppeals();
    }

    private async Task FilterByApprovedClick(bool isApproved)
    {
        filterByApproved = isApproved;
        await FilterAppeals();
    }

    private void OpenDetails(BanAppealModel appeal)
    {
        navManager.NavigateTo($"/BanAppealDetails/{appeal.Id}");
    }

    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "btn-secondary";
        }

        return "btn-outline-secondary";
    }

    private string FilterByApprovedClass(bool isApproved)
    {
        if (isApproved == filterByApproved)
        {
            
            return "btn-secondary";
        }

        return "btn-outline-secondary";
    }

    private string SelectedUsernameClass(string username = "All")
    {
        if (username == selectedUsername)
        {
            return "bg-secondary";
        }

        return "bg-dark";
    }
}
