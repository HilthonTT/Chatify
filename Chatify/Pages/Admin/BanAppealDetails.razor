@page "/BanAppealDetails/{Id}"
@attribute [Authorize]
@inject IUserData userData
@inject IBanAppealData appealData
@inject IBanData banData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IConfiguration config

<div class="modal fade" id="approveAppealModal" tabindex="-1" role="dialog" aria-labelledby="approveAppealModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="approveAppealModalLongTitle">
                Approve @appeal?.AppealingUser.DisplayName's appeal
            </h5>
            <button type="button" class="btn-close btn-close-white text-white" data-dismiss="modal" aria-label="Close" />
            </div>
            <div class="modal-body">
                <div class="row">
                    <div>
                        <label class="form-label fw-bold text-uppercase" for="profile-picture">Approve appeal</label>
                        <div>Are you sure you would like to approve this appeal?</div>
                    </div>
                    <div class="center-children">
                        <button class="btn btn-secondary btn-lg text-uppercase mt-4" 
                            type="submit" 
                            data-dismiss="modal" 
                            @onclick="(() => ApproveAppeal())">
                            Approve
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" 
                    class="btn btn-secondary" 
                    data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="disapproveAppealModal" tabindex="-1" role="dialog" aria-labelledby="disapproveAppealModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dark" role="document"> 
    <div class="modal-content bg-dark text-white"> 
        <div class="modal-header">
            <h5 class="modal-title" id="approveAppealModalLongTitle">
                Disapprove @appeal?.AppealingUser.DisplayName's appeal
            </h5>
            <button type="button" class="btn-close btn-close-white text-white" data-dismiss="modal" aria-label="Close" />
            </div>
            <div class="modal-body">
                <div class="row">
                    <div>
                        <label class="form-label fw-bold text-uppercase" for="profile-picture">Disapprove appeal</label>
                        <div>Are you sure you would like to disapprove this appeal?</div>
                    </div>
                    <div class="center-children">
                        <button class="btn btn-secondary btn-lg text-uppercase mt-4" 
                            type="submit" 
                            data-dismiss="modal" 
                            @onclick="(() => DisapproveAppeal())">
                            Disapprove
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" 
                    class="btn btn-secondary" 
                    data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>



<h1 class="page-heading mb-4">Ban Appeal Details</h1>

<div class="rounded rounded-3">
    <div class="card-body">
        <div class="row justify-content-center">
            <div class="col-lg-10 col-md-8 card bg-dark p-4">
                <div class="row">
                    <div class="close-button-section">
                        <button class="btn btn-close btn-close-white" @onclick="ClosePage"/>
                    </div>
                    <div class="col-12">
                        @if (appeal is not null)
                        {
                            <div class="d-flex justify-content-start">
                                <h2>@appeal.AppealingUser.DisplayName's appeal</h2>
                            </div>
                            <p class="fs-5 text-danger">
                                This appeal was submitted on @appeal.SubmittedAt.ToString("dd/MM/yyyy")
                            </p>
                            <hr />
                            <div>
                                <h2>Appeal Reason</h2>
                                <p class="fs-5 text-break text-danger">
                                    @appeal.AppealReason
                                </p>
                            </div>
                            <hr />
                            <div>
                                <h2>Status</h2>
                                <p class="fs-5 text-danger">
                                    @((appeal.IsApproved) ? "Approved" : "Pending")
                                </p>
                            </div>
                            @if (appeal.ApprovedAdmin is not null)
                            {
                                <hr />
                                <div>
                                    <h2>Approved By</h2>
                                    <p class="fs-5 text-danger">
                                        @appeal.ApprovedAdmin.DisplayName - @appeal.ApprovedAdmin.Id
                                    </p>
                                    <p class="fs-5 text-danger">
                                        @appeal.ApprovedAt.ToString("dd/MM/yyyy")
                                    </p>
                                </div>
                            }
                            @if (appeal.DisapprovedAdmin is not null)
                            {
                                <hr />
                                <div>
                                    <h2>Disapproved By</h2>
                                    <p class="fs-5 text-danger">
                                        @appeal.DisapprovedAdmin.DisplayName - @appeal.DisapprovedAdmin.Id
                                    </p>
                                    <p class="fs-5 text-danger">
                                        @appeal.DisapprovedAt.ToString("dd/MM/yyyy")
                                    </p>
                                </div>
                            }
                            @if (appeal.IsApproved is false)
                            {
                                <button class="btn btn-secondary w-100" 
                                    data-toggle="modal" 
                                    data-target="#approveAppealModal">
                                    Approve
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-secondary w-100" 
                                        data-toggle="modal" 
                                        data-target="#disapproveAppealModal">
                                    Disapprove
                                </button>                            
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private UserModel loggedInUser;
    private BanModel ban;
    private BanAppealModel appeal;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        appeal = await appealData.GetBanAppealAsync(Id);
        if (appeal is not null)
        {
            ban = await banData.GetBanAsync(appeal.Ban.Id);
        }
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot"), relativePath);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/BanAppeals");
    }

    private async Task ApproveAppeal()
    {
        appeal.IsApproved = true;
        appeal.ApprovedAt = DateTime.UtcNow;
        appeal.ApprovedAdmin = new BasicUserModel(loggedInUser);

        if (ban is not null)
        {
            ban.IsActive = false;
            await banData.UpdateBan(ban);
        }

        await appealData.UpdateAppeal(appeal);
        ClosePage();
    }

    private async Task DisapproveAppeal()
    {
        appeal.IsApproved = false;
        appeal.DisapprovedAdmin = new BasicUserModel(loggedInUser);
        appeal.DisapprovedAt = DateTime.UtcNow;

        await appealData.UpdateAppeal(appeal);

        if (ban is not null)
        {
            ban.IsActive = true;
            await banData.UpdateBan(ban);
        }

        ClosePage();
    }
}
