@page "/FriendRequests"
@inject IFriendRequestData requestData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="text-uppercase fw-bold text-center">Friend Requests</h1>

@code {
    private UserModel loggedInUser;
    private List<FriendRequestModel> pendingRequests;
    private FriendRequestModel selectedRequest;
    private string searchText = "";
    private bool isSortedByNew = true;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await userData.GetUserFromAuthenticationAsync("abc-123");
        if (loggedInUser is not null)
        {
            pendingRequests = await requestData.GetUserPendingFriendRequestsAsync(loggedInUser.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterRequests();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterRequests()
    {
        loggedInUser = await userData.GetUserFromAuthenticationAsync("abc-123");

        var output = await requestData.GetUserPendingFriendRequestsAsync(loggedInUser.Id);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(f => f.Sender.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                f.Sender.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(f => f.RequestDate).ToList();
        }
        else
        {
            output = output.OrderBy(f => f.RequestDate).ToList();
        }

        pendingRequests = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterRequests();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterRequests();
    }
}
