@inject IUserData userData
@inject IFriendRequestData requestData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject ProtectedSessionStorage sessionStorage
<nav class="navbar navbar-expand-lg navbar-dark bg-dark p-3">
    <a class="navbar-brand" href="/">Chatify</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item active">
                <a class="nav-link" href="/">Home</a>
            </li>
            <AuthorizeView>
                <Authorized>
                    <li class="nav-item">
                        <a class="nav-link" href="/Profile">
                            Profile
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="MicrosoftIdentity/Account/SignOut">
                            Logout
                        </a>
                    </li>
                    @if (loggedInUser is not null)
                    {
                        <li class="nav-item nav-link">
                            <span class="oi oi-person"></span> @loggedInUser.DisplayName
                        </li>
                    }
                </Authorized>
                <NotAuthorized>
                    <li class="nav-item">
                        <a class="nav-link" href="MicrosoftIdentity/Account/SignIn">
                            Login
                        </a>
                    </li>
                </NotAuthorized>
            </AuthorizeView>
        </ul>
        <div class="d-flex">
            <AuthorizeView>
                <Authorized>
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Friends
                            </a>
                            <div class="dropdown-menu dropdown-menu-dark  accordion-body" aria-labelledby="navbarDarkDropdownMenuLink">
                                <a class="dropdown-item" href="/FriendRequests">Friend Requests</a>
                                <a class="dropdown-item" href="/SendFriendRequest">Send Friend Request</a>
                            </div>
                        </li>
                    </ul>
                </Authorized>
            </AuthorizeView>
            <input class="form-control me-2 text-light bg-dark" type="search" placeholder="Search User" aria-label="Search User" 
            @oninput="((txt) => searchText = (string)txt.Value)"/>
            <button class="btn btn-outline-success" type="submit" @onclick="GoToUsers">Search</button>
        </div>
    </div>
</nav>

@code {
    private string searchText = "";
    private UserModel loggedInUser;
    private List<FriendRequestModel> friendRequests;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is not null)
        {
            friendRequests = await requestData.GetUserPendingFriendRequestsAsync(loggedInUser.Id);
        }
    }

    private void GoToUsers()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            navManager.NavigateTo($"/Users/", forceLoad: true);
        }

        navManager.NavigateTo($"/Users/{searchText}", forceLoad: true);
    }
}
